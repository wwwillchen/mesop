I will teach you how to use a Python UI framework called Mesop:--- ./docs/getting_started.md
---
hide:
  - navigation
---

# Getting Started

This guide will walk you step by step through building a simple interactive Mesop app.

## Installing Mesop

Run the following command in your terminal:

```shell
$ pip install mesop
```

## Running Mesop

Copy the following hello world code into a file `hello_world.py`:

```python title="hello_world.py"
--8<-- "mesop/examples/docs/hello_world.py"
```

Then run the following command in your terminal:

```shell
$ mesop hello_world.py
```

## Quickstart app

The simplest way to get started with Mesop is to use the [`text_to_text` component](./components/text_to_text.md)

```python
--8<-- "mesop/examples/text_to_text.py"
```

The rest of this guide will show you step-by-step how something like text_to_text is implemented.

## Hello World app

Let's start by creating a simple Hello World app in Mesop:

```python
--8<-- "mesop/examples/docs/hello_world.py"
```

This simple example demonstrates a few things:

- Every Mesop app starts with `import mesop as me`. This is the only recommended way to import mesop, otherwise your app may break in the future because you may be relying on internal implementation details.
- `@me.page` is a function decorator which makes a function a _root component_ for a particular path. If you omit the `path` parameter, this is the equivalent of doing `@me.page(path="/")`.
- `app` is a Python function that we will call a __component__ because it's creating Mesop components in the body.

## Components

Components are the building blocks of a Mesop application. A Mesop application is essentially a tree of components.

Let's explain the different kinds of components in Mesop:

- Mesop comes built-in with __native__ components. These are components implemented using Angular/Javascript. Many of these components wrap [Angular Material components](https://material.angular.io/components/).
- You can also create your own components which are called __user-defined__ components. These are essentially Python functions like `app` in the previous example.

## Counter app

Let's build a more complex app to demonstrate Mesop's interactivity features.

```python
--8<-- "mesop/examples/docs/counter.py"
```

This app allows the user to click on a button and increment a counter, which is shown to the user as "Clicks: #".

Let's walk through this step-by-step.

### State

The `State` class represents the application state for a particular browser session. This means every user session has its own instance of `State`.

`@me.stateclass` is a class decorator which is similar to Python's [dataclass](https://docs.python.org/3/library/dataclasses.html) but also sets default value based on type hints and allows Mesop to inject the class as shown next.

> Note: Everything in a state class must be serializable because it's sent between the server and browser.

### Event handler

The `button_click` function is an event handler. An event handler has a single parameter, `event`, which can contain a value (this will be shown in the next example). An event handler is responsible for updating state based on the incoming event.

`me.state(State)` retrieves the instance of the state class for the current session.

### Component

Like the previous example, `main` is a Mesop component function which is decorated with `page` to mark it as a root component for a path.

Similar to the event handler, we can retrieve the state in a component function by calling `me.state(State)`.

> Note: it's _not_ safe to mutate state inside a component function. All mutations must be done in an event handler.

Rendering dynamic values in Mesop is simple because you can do standard Python string interpolation use f-strings:

```python
me.text(f"Clicks: {state.clicks}")
```

The button component demonstrates two aspects of calling a Mesop component:

```python
with me.button(on_click=button_click):
  me.text("Increment")
```

The `with` statement allows you to nest components inside another component. In this case, we want to show the text "Increment", so we call `me.text` as a child component inside of `me.button`.

The `on_click` argument is how you wire the event handler defined above to a specific component. Whenever a click event is triggered by the component, the registered event handler function is called.

In summary, you've learned how to define a state class, an event handler and wire them together using interactive components.

## What's next

At this point, you've learned all the basics of building a Mesop app and now you should be able to understand how [Text I/O is implemented](https://github.com/google/mesop/blob/main/mesop/labs/io.py) under the hood.

To learn more about Mesop, I recommend reading the [Guides](./guides/components.md) and then spend time looking at the [examples on GitHub](https://github.com/google/mesop/tree/main/mesop/examples). As you build your own applications, you'll want to reference the [Components API reference](./components/button.md) docs.


--- ./docs/guides/pages.md
# Pages

You can define multi-page Mesop applications by using the page feature you learned from [Getting Started](../getting_started.md)

## Simple, 1-page setup

To create a simple Mesop app, you can use `me.page()` like this:

```python
import mesop as me

@me.page()
def foo():
    me.text("bar")
```

> NOTE: If you do not provide a `path` argument, then it defaults to the root path `"/"`.

## Explicit 1-page setup

This is the same as the above example which explicitly sets the route to `"/"`.

```python
import mesop as me

@me.page(path="/")
def foo():
    me.text("bar")
```

## Multi-page setup

```python
import mesop as me

@me.page(path="/1")
def page1():
    me.text("page 1")

@me.page(path="/2")
def page2():
    me.text("page 2")
```

## Navigation

If you have multiple pages, you will typically want to navigate from one page to another when the user clicks a button. You can use `me.navigate("/to/path")` to navigate to another page.

**Example:**

```python
--8<-- "mesop/examples/docs/multi_page_nav.py"
```

> Note: you can re-use state across pages. See how the above example uses the `State#count` value across pages.


--- ./docs/guides/troubleshooting.md
# Troubleshooting

## State must be serializable

All the fields, recursively, in your State class must be serializable.

## User input race condition

If you notice a race condition with user input (e.g. [input](../components/input.md) or [textarea](../components/textarea.md)) where sometimes the last few characters typed by the user is lost, you are probably unnecessarily setting the value of the component.

See the following example using this **anti-pattern** :warning::

```py title="Bad example"
@me.stateclass
class State:
  input_value: str

def app():
  state = me.state(State)
  me.input(value=state.input_value, on_input=on_input)

def on_input(event: me.InputEvent):
  state = me.state(State)
  state.input_value = event.value
```

The problem is that the input value now has a race condition because it's being set by two sources:

1. The server is setting the input value based on state.
2. The client is setting the input value based on what the user is typing.

The way to fix this is by *not* setting the input value from the server.

The above example **corrected** would look like this :white_check_mark::

```py title="Good example" hl_lines="7"
@me.stateclass
class State:
  input_value: str

def app():
  state = me.state(State)
  me.input(on_input=on_input)

def on_input(event: me.InputEvent):
  state = me.state(State)
  state.input_value = event.value
```

## Avoid using closure variables in event handler

One subtle mistake when building a reusable component is to have the event handler use a closure variable like the following example:

```py title="Bad example of using closure variable"
@me.component
def link_component(url: str):
   def on_click(event: me.ClickEvent):
     me.navigate(url)
  return me.button(url, on_click=on_click)

def app():
    link_component("/1")
    link_component("/2")
```

The problem with this above example is that Mesop only stores the last event handler. This means that both instances of the link_component will refer to the last `on_click` instance which references the same `url` closure variable set to `"/2"`. This almost always produces the wrong behavior.

Instead, you will want to use the pattern of relying on the key in the event handler as demonstrated in the following example:

```py title="Good example of using key"
@me.component
def link_component(url: str):
   def on_click(event: me.ClickEvent):
     me.navigate(event.key)
  return me.button(url, key=url, on_click=on_click)
```

For more info on using component keys, please refer to the [Component Key docs](./components.md#component-key).


--- ./docs/guides/components.md
# Components

Please read [Getting Started](../getting_started.md) before this as it explains the basics of components. This page provides an in-depth explanation of the different types of components in Mesop.

## Kinds of components

### Native components

Native components are components implemented using Angular/Javascript. Many of these components wrap [Angular Material components](https://material.angular.io/components/). Other components are simple wrappers around DOM elements.

If you have a use case that's not supported by the existing native components, please [file an issue on GitHub](https://github.com/google/mesop/issues/new) to explain your use case. Given our limited bandwidth, we may not be able to build it soon, but in the future, we will enable Mesop developers to build their own custom native components.

### User-defined components

User-defined components are essentially Python functions which call other components, which can be native components or other user-defined components. It's very easy to write your own components, and it's encouraged to split your app into modular components for better maintainability and reusability.

## Content components

Content components allow you to compose components more flexibly than regular components by accepting child(ren) components. A commonly used content component is the [button](../components/button.md) component, which accepts a child component which oftentimes the [text](../components/text.md) component.

Example:

```python
with me.button():
  me.text("Child")
```

You can also have multiple content components nested:

```python
with me.box():
  with me.box():
    me.text("Grand-child")
```

Sometimes, you may want to define your own content component for better reusability. For example, let's say I want to define a scaffold component which includes a menu positioned on the left and a main content area, I could do the following:

```python
@me.content_component
def scaffold(url: str):
  with me.box(style="background: white"):
    menu(url=url)
    with me.box(style=f"padding-left: {MENU_WIDTH}px"):
      me.slot()
```

Now other components can re-use this scaffold component:

```python
def page1():
  with scaffold(url="/page1"):
    some_content(...)
```

This is similar to Angular's [Content Projection](https://angular.io/guide/content-projection).

## Component Key

Every native component in Mesop accepts a `key` argument which is a component identifier. This is used by Mesop to tell [Angular whether to reuse the DOM element](https://angular.io/api/core/TrackByFunction#description).

### Resetting a component

You can reset a component to the initial state (e.g. reset a [select](../components/select.md) component to the unselected state) by giving it a new key value across renders.

For example, you can reset a component by "incrementing" the key:

```py
class State:
  select_menu_key: int

def reset(event):
  state = me.state(State)
  state.select_menu_key += 1

def main():
  state = me.state(State)
  me.select(key=str(state.select_menu_key),
            options=[me.SelectOption(label="o1", value="o1")])
  me.button(label="Reset", on_click=reset)
```

### Event handlers

Every Mesop event includes the key of the component which emitted the event. This makes it useful when you want to reuse an event handler for multiple instances of a component:

```py
def buttons():
  for fruit in ["Apple", "Banana"]:
    me.button(fruit, key=fruit, on_click=on_click)

def on_click(event: me.ClickEvent):
  fruit = me.key
  print("fruit name", fruit)
```

Because a key is a `str` type, you may sometimes want to store more complex data like a dataclass or a proto object for retrieval in the event handler. To do this, you can serialize and deserialize:

```py
import json
from dataclasses import dataclass

@dataclass
class Person:
  name: str

def buttons():
  for person in [Person(name="Alice"), Person(name="Bob")]:
    # serialize dataclass into str
    key = json.dumps(person.asdict())
    me.button(person.name, key=key, on_click=on_click)

def on_click(event: me.ClickEvent):
  person_dict = json.loads(me.key)
  # modify this for more complex deserialization
  person = Person(**person_dict)
```

!!! Tip "Use component key for reusable event handler"

    This avoids a [subtle issue with using closure variables in event handlers](./troubleshooting.md#avoid-using-closure-variables-in-event-handler).


--- ./docs/guides/interactivity.md
# Interactivity

This guide continues from the Counter app example in [Getting Started](../getting_started.md#counter-app) and explains advanced interactivity patterns.

## State

Example state class:

```python
@me.stateclass
class State:
  clicks: int
```

Each user session, which is equivalent to a browser session, will have its own state instance. Everything in a state class, recursively, must be serializable. This is because, under the hood, Mesop is sending the state back and forth between the server and browser client.

### Nested State

You can also have classes inside of a state class as long as everything is serializable:

```python
class NestedState:
  val: int

@me.stateclass
class State:
  nested: NestedState

def app():
  state = me.state(State)
```

> Note: you only need to decorate the top-level state class with `@me.stateclass`. All the nested state classes will automatically be wrapped.

## Slow / async patterns

These are patterns for dealing with common use cases such as calling a slow blocking API call or a streaming API call.

### Loading

If you are calling a slow blocking API (e.g. several seconds) to provide a better user experience, you may want to introduce a custom loading indicator for a specific event.

> Note: Mesop has a built-in loading indicator at the top of the page for all events.

```python
--8<-- "mesop/examples/docs/loading.py"
```

In this example, our event handler is a Python generator function. Each `yield` statement yields control back to the Mesop framework and executes a render loop which results in a UI update.

Before the first yield statement, we set `is_loading` to True on state so we can show a spinner while the user is waiting for the slow API call to complete.

Before the second (and final) yield statement, we set `is_loading` to False, so we can hide the spinner and then we add the result of the API call to state so we can display that to the user.

> Tip: you must have a yield statement as the last line of a generator event handler function. Otherwise, any code after the final yield will not be executed.

### Streaming

This example builds off the previous Loading example and makes our event handler a generator function so we can incrementally update the UI.

```python
--8<-- "mesop/examples/docs/streaming.py"
```


--- ./docs/guides/deployment.md
# Deployment

To deploy your Mesop application, we recommend using [Google Cloud Run](https://cloud.google.com/run) because it's easy to get started and there's a [free tier](https://cloud.google.com/run#pricing). However, it's possible to deploy your Mesop to other Cloud platforms.

## Example application

### Python

`main.py` which is your Mesop application code:

``` py title="main.py"
import mesop as me

@me.page(title="Home")
def home():
  me.text("Hello, world")
```

> Note: if you choose to use a different filename than main.py, you will need to modify the `Procfile` below.

### Procfile

`Procfile` which configures `gunicorn` to run Mesop.

```title="Procfile"
web: gunicorn --bind :8080 main:me
```

The `--bind: 8080` will run Mesop on port 8080.

The `main:me` syntax is `$(MODULE_NAME):$(VARIABLE_NAME)`: (see [Gunicorn docs](https://docs.gunicorn.org/en/stable/run.html) for more details):

 - Because the Mesop python file is `main.py`, the module name is `main`.
 - By convention, we do `import mesop as me` so the `me` refers to the main Mesop library module which is also a callable (e.g. a function) that conforms to WSGI.

### requirements.txt

`requirements.txt` specifies the Python dependencies needed. You may need to add additional dependencies depending on your use case.

```title="requirements.txt"
mesop
Flask==3.0.0
gunicorn==20.1.0
Werkzeug==3.0.1
```

## Pre-requisites

You will need to create a [Google Cloud](https://cloud.google.com/) account and install the [`gcloud` CLI](https://cloud.google.com/sdk/docs/install).

## Deploy to Google Cloud Run

In your terminal, go to the application directory, which has the files listed above.

Run the following command:

```sh
$ gcloud run deploy
```

Follow the instructions and then you should be able to access your deployed app.


--- ./docs/guides/labs.md
# Labs

Mesop Labs is built on top of the core Mesop framework and may evolve in the future.

## Using Labs

You will need to add an import statement to use labs:

```python
import mesop.labs as mel
```

The [code inside Mesop Labs](https://github.com/google/mesop/tree/main/mesop/labs) is intended to be simple to understand so you can copy and customize it as needed.


--- ./docs/components/text.md
## Overview

Text displays text as-is. If you have markdown text, use the [Markdown](./markdown.md) component.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/text"></iframe>

```python
--8<-- "demo/text.py"
```

## API

::: mesop.components.text.text.text


--- ./docs/components/input.md
## Overview

Input allows the user to type in a value and is based on the [Angular Material input component](https://material.angular.io/components/input/overview).

For longer text inputs, also see [Textarea](./textarea.md)

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/input" style="height: 120px"></iframe>

```python
--8<-- "demo/input.py"
```

## API

::: mesop.components.input.input.input
::: mesop.components.input.input.native_textarea


--- ./docs/components/markdown.md
## Overview

Markdown is used to render markdown text.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/markdown_demo"></iframe>

```python
--8<-- "demo/markdown_demo.py"
```

## API

::: mesop.components.markdown.markdown.markdown


--- ./docs/components/radio.md
## Overview

Radio is a single selection form control based on the [Angular Material radio component](https://material.angular.io/components/radio/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/radio" style="height: 100px"></iframe>

```python
--8<-- "demo/radio.py"
```

## API

::: mesop.components.radio.radio.radio

::: mesop.components.radio.radio.RadioOption

::: mesop.components.radio.radio.RadioChangeEvent


--- ./docs/components/slider.md
## Overview

Slider allows the user to select from a range of values and is based on the [Angular Material slider component](https://material.angular.io/components/slider/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/slider" style="height: 120px"></iframe>

```python
--8<-- "demo/slider.py"
```

## API

::: mesop.components.slider.slider.slider
::: mesop.components.slider.slider.SliderValueChangeEvent


--- ./docs/components/chat.md
## Overview

Chat component is a quick way to create a simple chat interface. Chat is part of [Mesop Labs](../guides/labs.md).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/chat"></iframe>

```python
--8<-- "demo/chat.py"
```

## API

::: mesop.labs.chat.chat


--- ./docs/components/button.md
## Overview

Button is based on the [Angular Material button component](https://material.angular.io/components/button/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/button" style="height: 200px"></iframe>

```python
--8<-- "demo/button.py"
```

## API

::: mesop.components.button.button.button
::: mesop.components.button.button.content_button
::: mesop.events.ClickEvent


--- ./docs/components/image.md
## Overview

Image is the equivalent of an [`<img>` HTML element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/image" style="height: 200px"></iframe>

```python
--8<-- "demo/image.py"
```

## API

::: mesop.components.image.image.image


--- ./docs/components/video.md
## Overview

Video is the equivalent of an [`<video>` HTML element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video). Video displays the browser's native video controls.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/video" style="height: 300px"></iframe>

```python
--8<-- "demo/video.py"
```

## API

::: mesop.components.video.video.video


--- ./docs/components/checkbox.md
## Overview

Checkbox is a multi-selection form control and is based on the [Angular Material checkbox component](https://material.angular.io/components/checkbox/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/checkbox" style="height: 100px"></iframe>

```python
--8<-- "demo/checkbox.py"
```

## API

::: mesop.components.checkbox.checkbox.checkbox
::: mesop.components.checkbox.checkbox.content_checkbox
::: mesop.components.checkbox.checkbox.CheckboxChangeEvent
::: mesop.components.checkbox.checkbox.CheckboxIndeterminateChangeEvent


--- ./docs/components/select.md
## Overview

Select allows the user to choose from a list of values and is based on the [Angular Material select component](https://material.angular.io/components/select/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/select" style="height: 200px"></iframe>

```python
--8<-- "demo/select.py"
```

## API

::: mesop.components.select.select.select
::: mesop.components.select.select.SelectOption
::: mesop.components.select.select.SelectSelectionChangeEvent
::: mesop.components.select.select.SelectOpenedChangeEvent


--- ./docs/components/progress_bar.md
## Overview

Progress Bar is used to indicate something is in progress and is based on the [Angular Material progress bar component](https://material.angular.io/components/progress-bar/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/progress_bar" style="height: 60px"></iframe>

```python
--8<-- "demo/progress_bar.py"
```

## API

::: mesop.components.progress_bar.progress_bar.progress_bar
::: mesop.components.progress_bar.progress_bar.ProgressBarAnimationEndEvent


--- ./docs/components/audio.md
## Overview

Audio is the equivalent of an [`<audio>` HTML element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio). Audio displays the browser's native audio controls.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/audio" style="height: 80px"></iframe>

```python
--8<-- "demo/audio.py"
```

## API

::: mesop.components.audio.audio.audio


--- ./docs/components/table.md
## Overview

Table allows the user to render an [Angular Material table component](https://material.angular.io/components/table/overview) from a Pandas data frame.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/table"></iframe>

```python
--8<-- "demo/table.py"
```

## API

::: mesop.components.table.table.table


--- ./docs/components/slide_toggle.md
## Overview

Slide Toggle allows the user to toggle on and off and is based on the [Angular Material slide toggle component](https://material.angular.io/components/slide-toggle/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/slide_toggle" style="height: 100px"></iframe>

```python
--8<-- "demo/slide_toggle.py"
```

## API

::: mesop.components.slide_toggle.slide_toggle.slide_toggle
::: mesop.components.slide_toggle.slide_toggle.content_slide_toggle
::: mesop.components.slide_toggle.slide_toggle.SlideToggleChangeEvent


--- ./docs/components/plot.md
## Overview

Plot provides a convenient way to render [Matplotlib](https://matplotlib.org/) figures as an image.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/plot"></iframe>

```python
--8<-- "demo/plot.py"
```

## API

::: mesop.components.plot.plot.plot


--- ./docs/components/text_to_image.md
## Overview

Text To Image component is a quick and simple way of getting started with Mesop. Text To Image is part of [Mesop Labs](../guides/labs.md).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/text_to_image"></iframe>

```python
--8<-- "demo/text_to_image.py"
```
## API

::: mesop.labs.text_to_image.text_to_image


--- ./docs/components/embed.md
## Overview

Embed allows you to embed/[iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) another web site in your Mesop app.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/embed"></iframe>

```python
--8<-- "demo/embed.py"
```

## API

::: mesop.components.embed.embed.embed


--- ./docs/components/style.md
## Overview

Mesop provides a Python API that wraps the browser's native CSS [style API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style).

## API

::: mesop.component_helpers.style.Style
::: mesop.component_helpers.style.Border
::: mesop.component_helpers.style.BorderSide
::: mesop.component_helpers.style.Margin
::: mesop.component_helpers.style.Padding


--- ./docs/components/sidenav.md
## Overview

Sidenav is a sidebar typically used for navigation and is based on the [Angular Material sidenav component](https://material.angular.io/components/sidenav/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/sidenav" style="height: 100px"></iframe>

```python
--8<-- "demo/sidenav.py"
```

## API

::: mesop.components.sidenav.sidenav.sidenav


--- ./docs/components/icon.md
## Overview

Icon displays a Material icon/symbol and is based on the [Angular Material icon component](https://material.angular.io/components/icon/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/icon" style="height: 60px"></iframe>

```python
--8<-- "demo/icon.py"
```

## API

::: mesop.components.icon.icon.icon


--- ./docs/components/box.md
## Overview

Box is a [content component](../guides/components.md#content-components) which acts as a container to group children components and styling them.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/box" style="height: 160px"></iframe>

```python
--8<-- "demo/box.py"
```

## API

::: mesop.components.box.box.box


--- ./docs/components/textarea.md
## Overview

Textarea allows the user to type in a value and is based on the [Angular Material input component](https://material.angular.io/components/input/overview) for `<textarea>`.

This is similar to [Input](./input.md), but Textarea is better suited for long text inputs.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/textarea" style="height: 200px"></iframe>

```python
--8<-- "demo/textarea.py"
```

## API

::: mesop.components.input.input.textarea


--- ./docs/components/uploader.md
## Overview

Uploader is the equivalent of an [`<input type="file>` HTML element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file) except it uses a custom UI that better
matches the look of Angular Material Components.

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/uploader" style="height: 200px"></iframe>

```python
--8<-- "demo/uploader.py"
```

## API

::: mesop.components.uploader.uploader.uploader


--- ./docs/components/code.md
## Overview

Code is used to render code with syntax highlighting. `code` is a simple wrapper around [markdown](./markdown.md).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/code"></iframe>

```python
--8<-- "demo/code.py"
```

## API

::: mesop.components.code.code.code


--- ./docs/components/tooltip.md
## Overview

Tooltip is based on the [Angular Material tooltip component](https://material.angular.io/components/tooltip/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/tooltip" style="height: 100px"></iframe>

```python
--8<-- "demo/tooltip.py"
```

## API

::: mesop.components.tooltip.tooltip.tooltip


--- ./docs/components/text_to_text.md
## Overview

Text to text component allows you to take in user inputted text and return a transformed text. This is part of [Mesop Labs](../guides/labs.md).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/text_to_text"></iframe>

```python
--8<-- "demo/text_to_text.py"
```

## API

::: mesop.labs.text_to_text.text_to_text

::: mesop.labs.text_to_text.text_io


--- ./docs/components/badge.md
## Overview

Badge decorates a UI component and is oftentimes used for unread message count and is based on the [Angular Material badge component](https://material.angular.io/components/badge/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/badge" style="height: 100px"></iframe>

```python
--8<-- "demo/badge.py"
```

## API

::: mesop.components.badge.badge.badge


--- ./docs/components/progress_spinner.md
## Overview

Progress Spinner is used to indicate something is in progress and is based on the [Angular Material progress spinner component](https://material.angular.io/components/progress-spinner/overview).


## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/progress_spinner" style="height: 70px"></iframe>

```python
--8<-- "demo/progress_spinner.py"
```

## API

::: mesop.components.progress_spinner.progress_spinner.progress_spinner


--- ./docs/components/divider.md
## Overview

Divider is used to provide visual separation and is based on the [Angular Material divider component](https://material.angular.io/components/divider/overview).

## Examples

<iframe class="component-demo" src="https://mesop-y677hytkra-uc.a.run.app/divider" style="height: 100px"></iframe>

```python
--8<-- "demo/divider.py"
```

## API

::: mesop.components.divider.divider.divider


These are all the components and their APIs:--- ./mesop/labs/text_to_image.py
from typing import Callable

import mesop as me


@me.stateclass
class State:
  input: str
  output: str
  textarea_key: int


def text_to_image(
  transform: Callable[[str], str],
  *,
  title: str | None = None,
):
  """Creates a simple UI which takes in a text input and returns an image output.

  This function creates event handlers for text input and output operations
  using the provided function `transform` to process the input and generate the image
  output.

  Args:
    transform: Function that takes in a string input and returns a URL to an image or a base64 encoded image.
    title: Headline text to display at the top of the UI.
  """

  def on_input(e: me.InputEvent):
    state = me.state(State)
    state.input = e.value

  def on_click_generate(e: me.ClickEvent):
    state = me.state(State)
    state.output = transform(state.input)

  def on_click_clear(e: me.ClickEvent):
    state = me.state(State)
    state.input = ""
    state.output = ""
    state.textarea_key += 1

  with me.box(
    style=me.Style(
      background="#f0f4f8",
      height="100%",
    )
  ):
    with me.box(
      style=me.Style(
        background="#f0f4f8",
        padding=me.Padding(top=24, left=24, right=24, bottom=24),
        display="flex",
        flex_direction="column",
      )
    ):
      if title:
        me.text(title, type="headline-5")
      with me.box(
        style=me.Style(
          margin=me.Margin(left="auto", right="auto"),
          width="min(1024px, 100%)",
          gap="24px",
          flex_grow=1,
          display="flex",
          flex_wrap="wrap",
        )
      ):
        box_style = me.Style(
          flex_basis="max(480px, calc(50% - 48px))",
          background="#fff",
          border_radius=12,
          box_shadow=(
            "0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f"
          ),
          padding=me.Padding(top=16, left=16, right=16, bottom=16),
          display="flex",
          flex_direction="column",
        )

        with me.box(style=box_style):
          me.text("Input", style=me.Style(font_weight=500))
          me.box(style=me.Style(height=16))
          me.textarea(
            key=str(me.state(State).textarea_key),
            on_input=on_input,
            rows=5,
            autosize=True,
            max_rows=15,
            style=me.Style(width="100%"),
          )
          me.box(style=me.Style(height=12))
          with me.box(
            style=me.Style(display="flex", justify_content="space-between")
          ):
            me.button(
              "Clear",
              color="primary",
              type="stroked",
              on_click=on_click_clear,
            )
            me.button(
              "Generate",
              color="primary",
              type="flat",
              on_click=on_click_generate,
            )
        with me.box(style=box_style):
          me.text("Output", style=me.Style(font_weight=500))
          if me.state(State).output:
            with me.box(
              style=me.Style(
                display="grid",
                justify_content="center",
                justify_items="center",
              )
            ):
              me.image(
                src=me.state(State).output,
                style=me.Style(width="100%", margin=me.Margin(top=10)),
              )


--- ./mesop/labs/__init__.py
from mesop.labs.chat import ChatMessage as ChatMessage
from mesop.labs.chat import chat as chat
from mesop.labs.text_to_image import text_to_image as text_to_image
from mesop.labs.text_to_text import text_io as text_io
from mesop.labs.text_to_text import text_to_text as text_to_text


--- ./mesop/labs/text_to_text.py
import types
from typing import Callable, Generator, Literal, cast

import mesop as me


@me.stateclass
class State:
  input: str
  output: str
  textarea_key: int


def text_io(
  transform: Callable[[str], Generator[str, None, None] | str],
  *,
  title: str | None = None,
  transform_mode: Literal["append", "replace"] = "replace",
):
  """Deprecated: Use `text_to_text` instead which provides the same functionality
  with better default settings.

  This function creates event handlers for text input and output operations
  using the provided transform function to process the input and generate the output.

  Args:
    transform: Function that takes in a string input and either returns or yields a string output.
    title: Headline text to display at the top of the UI
    transform_mode: Specifies how the output should be updated when yielding an output using a generator.
                  - "append": Concatenates each new piece of text to the existing output.
                  - "replace": Replaces the existing output with each new piece of text.
  """
  print(
    "\033[93m[warning]\033[0m text_io is deprecated, use text_to_text instead"
  )
  text_to_text(transform=transform, title=title, transform_mode=transform_mode)


def text_to_text(
  transform: Callable[[str], Generator[str, None, None] | str],
  *,
  title: str | None = None,
  transform_mode: Literal["append", "replace"] = "append",
):
  """Creates a simple UI which takes in a text input and returns a text output.

  This function creates event handlers for text input and output operations
  using the provided transform function to process the input and generate the output.

  Args:
    transform: Function that takes in a string input and either returns or yields a string output.
    title: Headline text to display at the top of the UI
    transform_mode: Specifies how the output should be updated when yielding an output using a generator.
                  - "append": Concatenates each new piece of text to the existing output.
                  - "replace": Replaces the existing output with each new piece of text.
  """

  def on_input(e: me.InputEvent):
    state = me.state(State)
    state.input = e.value

  def on_click_generate(e: me.ClickEvent):
    state = me.state(State)
    output = transform(state.input)
    if isinstance(output, types.GeneratorType):
      for val in output:
        if transform_mode == "append":
          state.output += val
        elif transform_mode == "replace":
          state.output = val
        else:
          raise ValueError(f"Unsupported transform_mode: {transform_mode}")
        yield
    else:
      # `output` is a str, however type inference doesn't
      # work w/ generator's unusual ininstance check.
      state.output = cast(str, output)
      yield

  def on_click_clear(e: me.ClickEvent):
    state = me.state(State)
    state.input = ""
    state.textarea_key += 1

  with me.box(
    style=me.Style(
      background="#f0f4f8",
      height="100%",
    )
  ):
    with me.box(
      style=me.Style(
        background="#f0f4f8",
        padding=me.Padding(top=24, left=24, right=24, bottom=24),
        display="flex",
        flex_direction="column",
      )
    ):
      if title:
        me.text(title, type="headline-5")
      with me.box(
        style=me.Style(
          margin=me.Margin(left="auto", right="auto"),
          width="min(1024px, 100%)",
          gap="24px",
          flex_grow=1,
          display="flex",
          flex_wrap="wrap",
        )
      ):
        box_style = me.Style(
          flex_basis="max(480px, calc(50% - 48px))",
          background="#fff",
          border_radius=12,
          box_shadow="0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f",
          padding=me.Padding(top=16, left=16, right=16, bottom=16),
          display="flex",
          flex_direction="column",
        )
        with me.box(style=box_style):
          me.text("Input", style=me.Style(font_weight=500))
          me.box(style=me.Style(height=16))
          me.textarea(
            key=str(me.state(State).textarea_key),
            on_input=on_input,
            rows=5,
            autosize=True,
            max_rows=15,
            style=me.Style(width="100%"),
          )
          me.box(style=me.Style(height=12))
          with me.box(
            style=me.Style(display="flex", justify_content="space-between")
          ):
            me.button(
              "Clear", color="primary", type="stroked", on_click=on_click_clear
            )
            me.button(
              "Generate",
              color="primary",
              type="flat",
              on_click=on_click_generate,
            )
        with me.box(style=box_style):
          me.text("Output", style=me.Style(font_weight=500))
          me.markdown(me.state(State).output)


--- ./mesop/labs/chat.py
import time
from dataclasses import dataclass
from typing import Callable, Generator, Literal

import mesop as me

Role = Literal["user", "assistant"]

_ROLE_USER = "user"
_ROLE_ASSISTANT = "assistant"

_BOT_USER_DEFAULT = "mesop-bot"

_COLOR_BACKGROUND = "#f0f4f8"
_COLOR_CHAT_BUBBLE_YOU = "#f2f2f2"
_COLOR_CHAT_BUBBLE_BOT = "#ebf3ff"

_DEFAULT_PADDING = me.Padding(top=20, left=20, right=20, bottom=20)
_DEFAULT_BORDER_SIDE = me.BorderSide(
  width="1px", style="solid", color="#ececec"
)

_LABEL_BUTTON = "Send prompt"
_LABEL_BUTTON_IN_PROGRESS = "Processing prompt..."
_LABEL_INPUT = "Enter your prompt"

_STYLE_APP_CONTAINER = me.Style(
  background=_COLOR_BACKGROUND,
  display="grid",
  height="100vh",
  grid_template_columns="repeat(1, 1fr)",
)
_STYLE_TITLE = me.Style(padding=me.Padding(left=10))
_STYLE_CHAT_BOX = me.Style(
  height="100%",
  overflow_y="scroll",
  padding=_DEFAULT_PADDING,
  margin=me.Margin(bottom=20),
  border_radius="10px",
  border=me.Border(
    left=_DEFAULT_BORDER_SIDE,
    right=_DEFAULT_BORDER_SIDE,
    top=_DEFAULT_BORDER_SIDE,
    bottom=_DEFAULT_BORDER_SIDE,
  ),
)
_STYLE_CHAT_INPUT = me.Style(width="100%")
_STYLE_CHAT_INPUT_BOX = me.Style(padding=me.Padding(top=30))
_STYLE_CHAT_BUBBLE_NAME = me.Style(
  font_weight="bold",
  font_size="12px",
  padding=me.Padding(left=15, right=15, bottom=5),
)
_STYLE_CHAT_BUBBLE_PLAINTEXT = me.Style(margin=me.Margin(top=15, bottom=15))


def _make_style_chat_ui_container(has_title: bool) -> me.Style:
  """Generates styles for chat UI container depending on if there is a title or not.

  Args:
    has_title: Whether the Chat UI is display a title or not.
  """
  return me.Style(
    display="grid",
    grid_template_columns="repeat(1, 1fr)",
    grid_template_rows="1fr 14fr 1fr" if has_title else "5fr 1fr",
    margin=me.Margin(top=0, bottom=0, left="auto", right="auto"),
    width="min(1024px, 100%)",
    height="100vh",
    background="#fff",
    box_shadow=(
      "0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f"
    ),
    padding=_DEFAULT_PADDING,
  )


def _make_style_chat_bubble_wrapper(role: Role) -> me.Style:
  """Generates styles for chat bubble position.

  Args:
    role: Chat bubble alignment depends on the role
  """
  align_items = "end" if role == _ROLE_USER else "start"
  return me.Style(
    display="flex",
    flex_direction="column",
    align_items=align_items,
  )


def _make_chat_bubble_style(role: Role) -> me.Style:
  """Generates styles for chat bubble.

  Args:
    role: Chat bubble background color depends on the role
  """
  background = (
    _COLOR_CHAT_BUBBLE_YOU if role == _ROLE_USER else _COLOR_CHAT_BUBBLE_BOT
  )
  return me.Style(
    width="80%",
    font_size="13px",
    background=background,
    border_radius="15px",
    padding=me.Padding(right=15, left=15, bottom=3),
    margin=me.Margin(bottom=10),
    border=me.Border(
      left=_DEFAULT_BORDER_SIDE,
      right=_DEFAULT_BORDER_SIDE,
      top=_DEFAULT_BORDER_SIDE,
      bottom=_DEFAULT_BORDER_SIDE,
    ),
  )


@dataclass(kw_only=True)
class ChatMessage:
  """Chat message metadata."""

  role: Role = "user"
  content: str = ""


@me.stateclass
class State:
  input: str
  output: list[ChatMessage]
  in_progress: bool = False


def on_input_update(State):
  """Generic on text input handler that saves input to State using the given key.

  This helper only works if you have one state instance. If use multiple state classes
  with this helper, then only the last event handler will be stored. For more info, see
  https://google.github.io/mesop/guides/troubleshooting/#avoid-using-closure-variables-in-event-handler.
  """

  def _on_update(e: me.InputEvent):
    state = me.state(State)
    setattr(state, e.key.split("-", 1)[0], e.value)

  return _on_update


def chat(
  transform: Callable[
    [str, list[ChatMessage]], Generator[str, None, None] | str
  ],
  *,
  title: str | None = None,
  bot_user: str = _BOT_USER_DEFAULT,
):
  """Creates a simple chat UI which takes in a prompt and chat history and returns a
  response to the prompt.

  This function creates event handlers for text input and output operations
  using the provided function `transform` to process the input and generate the output.

  Args:
    transform: Function that takes in a prompt and chat history and returns a response to the prompt.
    title: Headline text to display at the top of the UI.
    bot_user: Name of your bot / assistant.
  """
  state = me.state(State)

  def on_click(e: me.ClickEvent):
    state = me.state(State)
    if state.in_progress or not state.input:
      return
    input = state.input
    state.input = ""
    yield

    output = state.output
    if output is None:
      output = []
    output.append(ChatMessage(role=_ROLE_USER, content=input))
    state.in_progress = True
    yield

    start_time = time.time()
    output_message = transform(input, state.output)
    assistant_message = ChatMessage(role=_ROLE_ASSISTANT)
    output.append(assistant_message)
    state.output = output
    for content in output_message:
      assistant_message.content += content
      # TODO: 0.25 is an abitrary choice. In the future, consider making this adjustable.
      if (time.time() - start_time) >= 0.25:
        start_time = time.time()
        yield
    state.in_progress = False
    yield

  with me.box(style=_STYLE_APP_CONTAINER):
    with me.box(style=_make_style_chat_ui_container(bool(title))):
      if title:
        me.text(title, type="headline-5", style=_STYLE_TITLE)
      with me.box(style=_STYLE_CHAT_BOX):
        for msg in state.output:
          with me.box(style=_make_style_chat_bubble_wrapper(msg.role)):
            if msg.role == _ROLE_ASSISTANT:
              me.text(bot_user, style=_STYLE_CHAT_BUBBLE_NAME)
            with me.box(style=_make_chat_bubble_style(msg.role)):
              if msg.role == _ROLE_USER:
                me.text(msg.content, style=_STYLE_CHAT_BUBBLE_PLAINTEXT)
              else:
                me.markdown(msg.content)

      with me.box(style=_STYLE_CHAT_INPUT_BOX):
        me.input(
          label=_LABEL_INPUT,
          # Workaround: update key to clear input.
          key=f"input-{len(state.output)}",
          on_input=on_input_update(State),
          style=_STYLE_CHAT_INPUT,
        )
        with me.box():
          me.button(
            _LABEL_BUTTON_IN_PROGRESS if state.in_progress else _LABEL_BUTTON,
            color="primary",
            type="flat",
            disabled=state.in_progress,
            on_click=on_click,
          )


--- ./mesop/components/uploader/uploader.py
import io
from dataclasses import dataclass
from typing import Any, Callable, Sequence

import mesop.components.uploader.uploader_pb2 as uploader_pb
from mesop.component_helpers import (
  insert_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.events import MesopEvent
from mesop.exceptions import MesopDeveloperException


class UploadedFile(io.BytesIO):
  """Uploaded file contents and metadata."""

  def __init__(self, contents: bytes, *, name: str, size: int, mime_type: str):
    super().__init__(contents)
    self._name = name
    self._size = size
    self._mime_type = mime_type

  @property
  def name(self):
    return self._name

  @property
  def size(self):
    return self._size

  @property
  def mime_type(self):
    return self._mime_type


@dataclass(kw_only=True)
class UploadEvent(MesopEvent):
  """Event for file uploads.

  Attributes:
      file: Uploaded file.
  """

  file: UploadedFile


def map_upload_event(event, key):
  upload_event = uploader_pb.UploadEvent()
  upload_event.ParseFromString(event.bytes_value)
  if upload_event.file:
    return UploadEvent(
      key=key.key,
      file=UploadedFile(
        upload_event.file[0].contents,
        name=upload_event.file[0].name,
        size=upload_event.file[0].size,
        mime_type=upload_event.file[0].mime_type,
      ),
    )
  raise MesopDeveloperException("No file was sent to the server.")


register_event_mapper(UploadEvent, map_upload_event)


@register_native_component
def uploader(
  *,
  label: str,
  accepted_file_types: Sequence[str] | None = None,
  key: str | None = None,
  on_upload: Callable[[UploadEvent], Any] | None = None,
):
  """
  This function creates an uploader.

  Args:
      label: Upload button label.
      accepted_file_types: List of accepted file types. See the [accept parameter](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept).
      on_upload: File upload event handler.
  """
  insert_component(
    key=key,
    type_name="uploader",
    proto=uploader_pb.UploaderType(
      label=label,
      accepted_file_type=accepted_file_types or [],
      on_upload_event_handler_id=register_event_handler(
        on_upload, event=UploadEvent
      )
      if on_upload
      else "",
    ),
  )


--- ./mesop/components/uploader/e2e/__init__.py
from . import uploader_app as uploader_app


--- ./mesop/components/uploader/e2e/uploader_app.py
import base64

import mesop as me


@me.stateclass
class State:
  name: str
  size: int
  mime_type: str
  contents: str


@me.page(path="/components/uploader/e2e/uploader_app")
def app():
  state = me.state(State)
  me.uploader(
    label="Upload Image",
    accepted_file_types=["image/jpeg", "image/png"],
    on_upload=handle_upload,
  )

  if state.contents:
    with me.box(style=me.Style(margin=me.Margin.all(10))):
      me.text(f"File name: {state.name}")
      me.text(f"File size: {state.size}")
      me.text(f"File type: {state.mime_type}")

    with me.box(style=me.Style(margin=me.Margin.all(10))):
      me.image(src=state.contents)


def handle_upload(event: me.UploadEvent):
  state = me.state(State)
  state.name = event.file.name
  state.size = event.file.size
  state.mime_type = event.file.mime_type
  state.contents = f"data:{event.file.mime_type};base64,{base64.b64encode(event.file.getvalue()).decode()}"


--- ./mesop/components/video/video.py
import mesop.components.video.video_pb2 as video_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_native_component,
)


@register_native_component
def video(
  *,
  src: str,
  style: Style | None = None,
  key: str | None = None,
):
  """
  Creates a video.

  Args:
      src: URL of the video source
      style: The style to apply to the image, such as width and height.
  """
  insert_component(
    key=key,
    type_name="video",
    proto=video_pb.VideoType(
      src=src,
    ),
    style=style,
  )


--- ./mesop/components/video/e2e/video_app.py
import mesop as me


@me.page(path="/components/video/e2e/video_app")
def app():
  me.video(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm",
    style=me.Style(height=300, width=300),
  )


--- ./mesop/components/video/e2e/__init__.py
from . import video_app as video_app


--- ./mesop/components/tooltip/tooltip.py
from typing import Literal

import mesop.components.tooltip.tooltip_pb2 as tooltip_pb
from mesop.component_helpers import (
  insert_composite_component,
  register_native_component,
)


@register_native_component
def tooltip(
  *,
  key: str | None = None,
  position: Literal[
    "left", "right", "above", "below", "before", "after"
  ] = "left",
  position_at_origin: bool = False,
  disabled: bool = False,
  show_delay_ms: int = 0,
  hide_delay_ms: int = 0,
  message: str = "",
):
  """Creates a Tooltip component.
  Tooltip is a composite component.

  Args:
    key: The component [key](../guides/components.md#component-key).
    position: Allows the user to define the position of the tooltip relative to the parent element
    position_at_origin: Whether tooltip should be relative to the click or touch origin instead of outside the element bounding box.
    disabled: Disables the display of the tooltip.
    show_delay_ms: The default delay in ms before showing the tooltip after show is called
    hide_delay_ms: The default delay in ms before hiding the tooltip after hide is called
    message: The message to be displayed in the tooltip
  """
  return insert_composite_component(
    key=key,
    type_name="tooltip",
    proto=tooltip_pb.TooltipType(
      position=position,
      position_at_origin=position_at_origin,
      disabled=disabled,
      show_delay_ms=show_delay_ms,
      hide_delay_ms=hide_delay_ms,
      message=message,
    ),
  )


--- ./mesop/components/tooltip/e2e/tooltip_app.py
import mesop as me


@me.page(path="/components/tooltip/e2e/tooltip_app")
def app():
  with me.tooltip(message="Hello, world!"):
    me.text(text="sometext")


--- ./mesop/components/tooltip/e2e/__init__.py
from . import tooltip_app as tooltip_app


--- ./mesop/components/sidenav/sidenav.py
import mesop.components.sidenav.sidenav_pb2 as sidenav_pb
from mesop.component_helpers import (
  Style,
  insert_composite_component,
  register_native_component,
)


@register_native_component
def sidenav(
  *,
  opened: bool = True,
  style: Style | None = None,
  key: str | None = None,
):
  """
  This function creates a sidenav.

  Args:
      opened: A flag to determine if the sidenav is open or closed. Defaults to True.
      style: An optional Style object to apply custom styles. Defaults to None.
      key: The component [key](../guides/components.md#component-key).
  """
  return insert_composite_component(
    key=key,
    type_name="sidenav",
    style=style,
    proto=sidenav_pb.SidenavType(
      opened=opened,
    ),
  )


--- ./mesop/components/sidenav/e2e/__init__.py
from . import sidenav_app as sidenav_app


--- ./mesop/components/sidenav/e2e/sidenav_app.py
import mesop as me


@me.stateclass
class State:
  sidenav_open: bool


def on_click(e: me.ClickEvent):
  s = me.state(State)
  s.sidenav_open = not s.sidenav_open


SIDENAV_WIDTH = 200


@me.page(path="/components/sidenav/e2e/sidenav_app")
def app():
  state = me.state(State)
  with me.sidenav(
    opened=state.sidenav_open, style=me.Style(width=SIDENAV_WIDTH)
  ):
    me.text("Inside sidenav")

  with me.box(
    style=me.Style(
      margin=me.Margin(left=SIDENAV_WIDTH if state.sidenav_open else 0),
    ),
  ):
    with me.content_button(on_click=on_click):
      me.icon("menu")
    me.markdown("Main content")


--- ./mesop/components/progress_spinner/progress_spinner.py
from typing import Literal

import mesop.components.progress_spinner.progress_spinner_pb2 as progress_spinner_pb
from mesop.component_helpers import (
  insert_component,
  register_native_component,
)


@register_native_component
def progress_spinner(
  *,
  key: str | None = None,
  color: Literal["primary", "accent", "warn"] | None = None,
  diameter: float = 48,
  stroke_width: float = 4,
):
  """Creates a Progress spinner component.

  Args:
    key: The component [key](../guides/components.md#component-key).
    color: Theme palette color of the progress spinner.
    diameter: The diameter of the progress spinner (will set width and height of svg).
    stroke_width: Stroke width of the progress spinner.
  """
  insert_component(
    key=key,
    type_name="progress_spinner",
    proto=progress_spinner_pb.ProgressSpinnerType(
      color=color,
      diameter=diameter,
      stroke_width=stroke_width,
    ),
  )


--- ./mesop/components/progress_spinner/e2e/__init__.py
from . import progress_spinner_app as progress_spinner_app


--- ./mesop/components/progress_spinner/e2e/progress_spinner_app.py
import mesop as me


@me.page(path="/components/progress_spinner/e2e/progress_spinner_app")
def app():
  me.progress_spinner()  # default spinner
  me.progress_spinner(diameter=40, stroke_width=4)
  me.text("Two usages of spinners")


--- ./mesop/components/box/box.py
from typing import Any, Callable

import mesop.components.box.box_pb2 as box_pb
from mesop.component_helpers import (
  Style,
  insert_composite_component,
  register_event_handler,
  register_native_component,
)
from mesop.events import ClickEvent


@register_native_component
def box(
  *,
  style: Style | None = None,
  on_click: Callable[[ClickEvent], Any] | None = None,
  key: str | None = None,
) -> Any:
  """Creates a box component.

  Args:
    style: Style to apply to component. Follows [HTML Element inline style API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style).
    on_click: The callback function that is called when the box is clicked.
      It receives a ClickEvent as its only argument.
    key: The component [key](../guides/components.md#component-key).

  Returns:
    The created box component.
  """
  return insert_composite_component(
    key=key,
    type_name="box",
    proto=box_pb.BoxType(
      on_click_handler_id=register_event_handler(on_click, event=ClickEvent)
      if on_click
      else "",
    ),
    style=style,
  )


--- ./mesop/components/box/e2e/__init__.py
from . import box_app as box_app


--- ./mesop/components/box/e2e/box_app.py
import mesop as me


@me.page(path="/components/box/e2e/box_app")
def app():
  with me.box(style=me.Style(background="red", padding=me.Padding.all(16))):
    with me.box(
      style=me.Style(
        background="green",
        height=50,
        margin=me.Margin.symmetric(vertical=24, horizontal=12),
        border=me.Border.symmetric(
          horizontal=me.BorderSide(width=2, color="pink", style="solid"),
          vertical=me.BorderSide(width=2, color="orange", style="solid"),
        ),
      )
    ):
      me.text(text="hi1")
      me.text(text="hi2")


--- ./mesop/components/radio/radio.py
from dataclasses import dataclass
from typing import Any, Callable, Iterable, Literal

import mesop.components.radio.radio_pb2 as radio_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.events import MesopEvent


@dataclass(kw_only=True)
class RadioChangeEvent(MesopEvent):
  """Event representing a change in the radio component's value.

  Attributes:
      value: The new value of the radio component after the change.
      key (str): key of the component that emitted this event.
  """

  value: str


register_event_mapper(
  RadioChangeEvent,
  lambda event, key: RadioChangeEvent(key=key.key, value=event.string_value),
)


@dataclass(kw_only=True)
class RadioOption:
  """
  Attributes:
    label: Content to show for the radio option
    value: The value of this radio button.
  """

  label: str | None = None
  value: str | None = None


@register_native_component
def radio(
  *,
  options: Iterable[RadioOption] = (),
  on_change: Callable[[RadioChangeEvent], Any] | None = None,
  color: Literal["primary", "accent", "warn"] | None = None,
  label_position: Literal["before", "after"] = "after",
  value: str = "",
  disabled: bool = False,
  style: Style | None = None,
  key: str | None = None,
):
  """Creates a Radio component.

  Args:
    options: List of radio options
    on_change: Event emitted when the group value changes. Change events are only emitted when the value changes due to user interaction with a radio button (the same behavior as `<input type-"radio">`).
    color: Theme color for all of the radio buttons in the group.
    label_position: Whether the labels should appear after or before the radio-buttons. Defaults to 'after'
    value: Value for the radio-group. Should equal the value of the selected radio button if there is a corresponding radio button with a matching value.
    disabled: Whether the radio group is disabled.
    style: Style for the component.
    key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="radio",
    proto=radio_pb.RadioType(
      color=color,
      label_position=label_position,
      value=value,
      disabled=disabled,
      on_radio_change_event_handler_id=register_event_handler(
        on_change, event=RadioChangeEvent
      )
      if on_change
      else "",
      options=[
        radio_pb.RadioOption(
          label=option.label,
          value=option.value,
        )
        for option in options
      ],
    ),
    style=style,
  )


--- ./mesop/components/radio/e2e/__init__.py
from . import radio_app as radio_app


--- ./mesop/components/radio/e2e/radio_app.py
import mesop as me


@me.stateclass
class State:
  radio_value: str = "2"


def on_change(event: me.RadioChangeEvent):
  s = me.state(State)
  s.radio_value = event.value


@me.page(path="/components/radio/e2e/radio_app")
def app():
  s = me.state(State)
  me.radio(
    on_change=on_change,
    options=[
      me.RadioOption(label="Option 1", value="1"),
      me.RadioOption(label="Option 2", value="2"),
    ],
    value=s.radio_value,
    style=me.Style(
      border=me.Border.all(
        me.BorderSide(
          width=1,
          color="green",
          style="solid",
        )
      )
    ),
  )
  me.text(text="Selected radio value: " + s.radio_value)


--- ./mesop/components/plot/plot.py
import base64
from io import BytesIO
from typing import Protocol

from mesop.component_helpers import Style, component
from mesop.components.image.image import image


class Figure(Protocol):
  """
  Provides a minimal interface based on matplotlib's Figure class.
  """

  def savefig(self, fname: BytesIO, *, format: str):
    pass


# Skip pydantic validation because Figure is a Protocol which can't type-check properly
@component(skip_validation=True)
def plot(figure: Figure, *, style: Style | None = None):
  """
  Creates a plot component from a Matplotlib figure.

  Args:
    figure: A [Matplotlib figure](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure) which will be rendered.
    style: An optional Style object that defines the visual styling for the
      plot component. If None, default styling (e.g. height, width) is used.
  """
  buf = BytesIO()
  figure.savefig(buf, format="png")
  data = base64.b64encode(buf.getbuffer()).decode("ascii")
  image(src=f"data:image/png;base64,{data}", style=style)


--- ./mesop/components/embed/embed.py
import mesop.components.embed.embed_pb2 as embed_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_native_component,
)


@register_native_component
def embed(
  *,
  src: str,
  style: Style | None = None,
  key: str | None = None,
):
  """
  This function creates an embed component.

  Args:
      src: The source URL for the embed content.
      style: The style to apply to the embed, such as width and height.
      key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="embed",
    proto=embed_pb.EmbedType(src=src),
    style=style,
  )


--- ./mesop/components/embed/e2e/embed_app.py
import mesop as me


@me.page(path="/components/embed/e2e/embed_app")
def app():
  state = me.state(State)
  me.button("Switch src url", on_click=switch_src_url)
  me.embed(
    src=state.src_url if state.src_url else "https://google.github.io/mesop/",
    style=me.Style(width="100%", height="100%"),
  )


@me.stateclass
class State:
  src_url: str


def switch_src_url(e: me.ClickEvent):
  state = me.state(State)
  state.src_url = "https://google.github.io/mesop/internal/publishing/"


--- ./mesop/components/embed/e2e/__init__.py
from . import embed_app as embed_app


--- ./mesop/components/input/input.py
from typing import Any, Callable, Literal

import mesop.components.input.input_pb2 as input_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_event_handler,
  register_native_component,
)
from mesop.events import InputEvent


@register_native_component
def textarea(
  *,
  label: str = "",
  on_input: Callable[[InputEvent], Any] | None = None,
  rows: int = 5,
  autosize: bool = False,
  min_rows: int | None = None,
  max_rows: int | None = None,
  appearance: Literal["fill", "outline"] = "fill",
  style: Style | None = None,
  disabled: bool = False,
  placeholder: str = "",
  required: bool = False,
  value: str = "",
  readonly: bool = False,
  hide_required_marker: bool = False,
  color: Literal["primary", "accent", "warn"] = "primary",
  float_label: Literal["always", "auto"] = "auto",
  subscript_sizing: Literal["fixed", "dynamic"] = "fixed",
  hint_label: str = "",
  key: str | None = None,
):
  """Creates a Textarea component.

  Args:
    label: Label for input.
    autosize: If True, the textarea will automatically adjust its height to fit the content, up to the max_rows limit.
    min_rows: The minimum number of rows the textarea will display.
    max_rows: The maximum number of rows the textarea will display.
    on_input: [input](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) is a native browser event.
    rows: The number of lines to show in the text area.
    appearance: The form field appearance style.
    style: Style for input.
    disabled: Whether it's disabled.
    placeholder: Placeholder value
    required: Whether it's required
    value: Initial value.
    readonly: Whether the element is readonly.
    hide_required_marker: Whether the required marker should be hidden.
    color: The color palette for the form field.
    float_label: Whether the label should always float or float as the user types.
    subscript_sizing: Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.
    hint_label: Text for the form field hint.
    key: The component [key](../guides/components.md#component-key).
  """

  insert_component(
    key=key,
    type_name="textarea",
    proto=input_pb.InputType(
      rows=rows,
      autosize=autosize,
      min_rows=min_rows,
      max_rows=max_rows,
      is_textarea=True,
      is_native_textarea=False,
      disabled=disabled,
      placeholder=placeholder,
      required=required,
      value=value,
      readonly=readonly,
      hide_required_marker=hide_required_marker,
      color=color,
      float_label=float_label,
      appearance=appearance,
      subscript_sizing=subscript_sizing,
      hint_label=hint_label,
      label=label,
      on_input_handler_id=register_event_handler(on_input, event=InputEvent)
      if on_input
      else "",
    ),
    style=style,
  )


@register_native_component
def input(
  *,
  label: str = "",
  on_input: Callable[[InputEvent], Any] | None = None,
  type: Literal[
    "color",
    "date",
    "datetime-local",
    "email",
    "month",
    "number",
    "password",
    "search",
    "tel",
    "text",
    "time",
    "url",
    "week",
  ]
  | None = None,
  appearance: Literal["fill", "outline"] = "fill",
  style: Style | None = None,
  disabled: bool = False,
  placeholder: str = "",
  required: bool = False,
  value: str = "",
  readonly: bool = False,
  hide_required_marker: bool = False,
  color: Literal["primary", "accent", "warn"] = "primary",
  float_label: Literal["always", "auto"] = "auto",
  subscript_sizing: Literal["fixed", "dynamic"] = "fixed",
  hint_label: str = "",
  key: str | None = None,
):
  """Creates a Input component.

  Args:
    label: Label for input.
    on_input: [input](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) is a native browser event.
    type: Input type of the element. For textarea, use `me.Textarea(...)`
    appearance: The form field appearance style.
    style: Style for input.
    disabled: Whether it's disabled.
    placeholder: Placeholder value
    required: Whether it's required
    value: Initial value.
    readonly: Whether the element is readonly.
    hide_required_marker: Whether the required marker should be hidden.
    color: The color palette for the form field.
    float_label: Whether the label should always float or float as the user types.
    subscript_sizing: Whether the form field should reserve space for one line of hint/error text (default) or to have the spacing grow from 0px as needed based on the size of the hint/error content. Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.
    hint_label: Text for the form field hint.
    key: The component [key](../guides/components.md#component-key).
  """

  insert_component(
    key=key,
    type_name="input",
    proto=input_pb.InputType(
      is_textarea=False,
      is_native_textarea=False,
      disabled=disabled,
      placeholder=placeholder,
      required=required,
      type=type,
      value=value,
      readonly=readonly,
      hide_required_marker=hide_required_marker,
      color=color,
      float_label=float_label,
      appearance=appearance,
      subscript_sizing=subscript_sizing,
      hint_label=hint_label,
      label=label,
      on_input_handler_id=register_event_handler(on_input, event=InputEvent)
      if on_input
      else "",
    ),
    style=style,
  )


def native_textarea(
  *,
  on_input: Callable[[InputEvent], Any] | None = None,
  autosize: bool = False,
  min_rows: int | None = None,
  max_rows: int | None = None,
  style: Style | None = None,
  disabled: bool = False,
  placeholder: str = "",
  value: str = "",
  readonly: bool = False,
  key: str | None = None,
):
  """Creates a browser native Textarea component. Intended for advanced use cases with maximum UI control.

  Args:
    on_input: [input](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) is a native browser event.
    autosize: If True, the textarea will automatically adjust its height to fit the content, up to the max_rows limit.
    min_rows: The minimum number of rows the textarea will display.
    max_rows: The maximum number of rows the textarea will display.
    style: Style for input.
    disabled: Whether it's disabled.
    placeholder: Placeholder value
    value: Initial value.
    readonly: Whether the element is readonly.
    key: The component [key](../guides/components.md#component-key).
  """

  insert_component(
    key=key,
    type_name="input",
    proto=input_pb.InputType(
      is_textarea=False,
      is_native_textarea=True,
      autosize=autosize,
      min_rows=min_rows,
      max_rows=max_rows,
      disabled=disabled,
      placeholder=placeholder,
      value=value,
      readonly=readonly,
      on_input_handler_id=register_event_handler(on_input, event=InputEvent)
      if on_input
      else "",
    ),
    style=style,
  )


--- ./mesop/components/input/e2e/__init__.py
from . import input_app as input_app


--- ./mesop/components/input/e2e/input_app.py
import mesop as me


@me.stateclass
class State:
  input: str = ""


def on_input(e: me.InputEvent):
  state = me.state(State)
  state.input = e.value


@me.page(path="/components/input/e2e/input_app")
def app():
  s = me.state(State)
  me.input(label="Basic input", on_input=on_input)
  me.text(text=s.input)

  me.textarea(
    label="Textarea", on_input=on_input, value="hello world", color="warn"
  )
  me.textarea(
    on_input=on_input,
    placeholder="Placeholder should display automatically when there is no label",
  )
  me.input(
    label="Number input", type="number", on_input=on_input, color="accent"
  )
  me.markdown("# Native input")
  border_side = me.BorderSide(width=0)
  with me.box(
    style=me.Style(
      background="lightblue",
      padding=me.Padding(
        top=16,
        left=16,
        right=16,
        bottom=16,
      ),
    )
  ):
    me.native_textarea(
      readonly=False,
      style=me.Style(
        height=32,
        padding=me.Padding(top=16, right=16, bottom=16, left=16),
        border_radius=16,
        border=me.Border(
          top=border_side,
          right=border_side,
          bottom=border_side,
          left=border_side,
        ),
        outline="none",
      ),
    )


--- ./mesop/components/progress_bar/progress_bar.py
from dataclasses import dataclass
from typing import Any, Callable, Literal

import mesop.components.progress_bar.progress_bar_pb2 as progress_bar_pb
from mesop.component_helpers import (
  insert_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.events import MesopEvent


@dataclass(kw_only=True)
class ProgressBarAnimationEndEvent(MesopEvent):
  """
  Event emitted when the animation of the progress bar ends.

  Attributes:
      value: The value of the progress bar when the animation ends.
      key (str): Key of the component that emitted this event.
  """

  value: float


register_event_mapper(
  ProgressBarAnimationEndEvent,
  lambda event, key: ProgressBarAnimationEndEvent(
    key=key.key,
    value=event.double_value,
  ),
)


@register_native_component
def progress_bar(
  *,
  key: str | None = None,
  color: Literal["primary", "accent", "warn"] | None = None,
  value: float = 0,
  buffer_value: float = 0,
  mode: Literal[
    "determinate", "indeterminate", "buffer", "query"
  ] = "indeterminate",
  on_animation_end: Callable[[ProgressBarAnimationEndEvent], Any] | None = None,
):
  """Creates a Progress bar component.

  Args:
    key: The component [key](../guides/components.md#component-key).
    color: Theme palette color of the progress bar.
    value: Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.
    buffer_value: Buffer value of the progress bar. Defaults to zero.
    mode: Mode of the progress bar. Input must be one of these values: determinate, indeterminate, buffer, query, defaults to 'determinate'. Mirrored to mode attribute.
    on_animation_end: Event emitted when animation of the primary progress bar completes. This event will not be emitted when animations are disabled, nor will it be emitted for modes with continuous animations (indeterminate and query).
  """
  insert_component(
    key=key,
    type_name="progress_bar",
    proto=progress_bar_pb.ProgressBarType(
      color=color,
      value=value,
      buffer_value=buffer_value,
      mode=mode,
      on_progress_bar_animation_end_event_handler_id=register_event_handler(
        on_animation_end, event=ProgressBarAnimationEndEvent
      )
      if on_animation_end
      else "",
    ),
  )


--- ./mesop/components/progress_bar/e2e/progress_bar_app.py
import mesop as me


@me.page(path="/components/progress_bar/e2e/progress_bar_app")
def app():
  me.text(text="Hello, world!")
  me.progress_bar(mode="indeterminate")


--- ./mesop/components/progress_bar/e2e/__init__.py
from . import progress_bar_app as progress_bar_app


--- ./mesop/components/markdown/markdown.py
import markdown as markdown_lib
from markdown.extensions.codehilite import CodeHiliteExtension

import mesop.components.markdown.markdown_pb2 as markdown_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_native_component,
)


@register_native_component
def markdown(
  text: str | None = None,
  *,
  style: Style | None = None,
  key: str | None = None,
):
  """
  This function creates a markdown.

  Args:
      text: **Required.** Markdown text
      style: Style to apply to component. Follows [HTML Element inline style API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style).
  """

  if text:
    html = markdown_lib.markdown(
      text,
      extensions=[
        CodeHiliteExtension(css_class="highlight"),
        "fenced_code",
      ],
    )
  else:
    html = ""
  insert_component(
    key=key,
    type_name="markdown",
    style=style,
    proto=markdown_pb.MarkdownType(
      html=html,
    ),
  )


--- ./mesop/components/markdown/e2e/__init__.py
from . import markdown_app as markdown_app


--- ./mesop/components/markdown/e2e/markdown_app.py
import mesop as me

SAMPLE_MARKDOWN = """
# Sample Markdown Document

Regular code block:

```
hello
```

Python code block:

Syntax 1:

```python
def foo():
  print("Hello, World!")

foo()
```

Syntax 2:

``` python
def foo():
  print("Hello, World!")

foo()
```

## Table of Contents
1. [Headers](#headers)
2. [Emphasis](#emphasis)
3. [Lists](#lists)
4. [Links](#links)
5. [Code](#code)
6. [Blockquotes](#blockquotes)
7. [Tables](#tables)
8. [Horizontal Rules](#horizontal-rules)

## Headers
# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6

## Emphasis
*Italic text* or _Italic text_
**Bold text** or __Bold text__
***Bold and Italic*** or ___Bold and Italic___

## Lists

### Unordered List
- Item 1
- Item 2
  - Subitem 2.1
  - Subitem 2.2

### Ordered List
1. First item
2. Second item
   1. Subitem 2.1
   2. Subitem 2.2

## Links
[Google](https://www.google.com/)

## Code
Inline `code`
"""


@me.page(path="/components/markdown/e2e/markdown_app")
def app():
  me.markdown(
    text=SAMPLE_MARKDOWN,
    style=me.Style(
      margin=me.Margin.all(4),
      border=me.Border.all(
        me.BorderSide(width=2, color="pink", style="solid"),
      ),
    ),
  )


--- ./mesop/components/checkbox/checkbox.py
from dataclasses import dataclass
from typing import Any, Callable, Literal

import mesop.components.checkbox.checkbox_pb2 as checkbox_pb
from mesop.component_helpers import (
  Style,
  component,
  insert_composite_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.components.text.text import text
from mesop.events import MesopEvent


@dataclass(kw_only=True)
class CheckboxChangeEvent(MesopEvent):
  """Represents a checkbox state change event.

  Attributes:
      checked: The new checked state of the checkbox.
      key (str): key of the component that emitted this event.
  """

  checked: bool


register_event_mapper(
  CheckboxChangeEvent,
  lambda event, key: CheckboxChangeEvent(
    key=key.key,
    checked=event.bool_value,
  ),
)


@dataclass(kw_only=True)
class CheckboxIndeterminateChangeEvent(MesopEvent):
  """Represents a checkbox indeterminate state change event.

  Attributes:
      checked: The new indeterminate state of the checkbox.
      key (str): key of the component that emitted this event.
  """

  indeterminate: bool


register_event_mapper(
  CheckboxIndeterminateChangeEvent,
  lambda event, key: CheckboxIndeterminateChangeEvent(
    key=key.key,
    indeterminate=event.bool_value,
  ),
)


@component
def checkbox(
  label: str | None = None,
  *,
  on_change: Callable[[CheckboxChangeEvent], Any] | None = None,
  on_indeterminate_change: Callable[[CheckboxIndeterminateChangeEvent], Any]
  | None = None,
  label_position: Literal["before", "after"] = "after",
  disable_ripple: bool = False,
  tab_index: int = 0,
  color: Literal["primary", "accent", "warn"] | None = None,
  checked: bool = False,
  disabled: bool = False,
  indeterminate: bool = False,
  style: Style | None = None,
  key: str | None = None,
):
  """Creates a simple Checkbox component with a text label.

  Args:
    label: Text label for checkbox
    on_change: Event emitted when the checkbox's `checked` value changes.
    on_indeterminate_change: Event emitted when the checkbox's `indeterminate` value changes.
    label_position: Whether the label should appear after or before the checkbox. Defaults to 'after'
    disable_ripple: Whether the checkbox has a ripple.
    tab_index: Tabindex for the checkbox.
    color: Palette color of the checkbox.
    checked: Whether the checkbox is checked.
    disabled: Whether the checkbox is disabled.
    indeterminate: Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false.
    style: Style for the component.
    key: The component [key](../guides/components.md#component-key).
  """
  with content_checkbox(
    on_change=on_change,
    on_indeterminate_change=on_indeterminate_change,
    label_position=label_position,
    disable_ripple=disable_ripple,
    tab_index=tab_index,
    color=color,
    checked=checked,
    disabled=disabled,
    indeterminate=indeterminate,
    style=style,
    key=key,
  ):
    text(label)


@register_native_component
def content_checkbox(
  *,
  on_change: Callable[[CheckboxChangeEvent], Any] | None = None,
  on_indeterminate_change: Callable[[CheckboxIndeterminateChangeEvent], Any]
  | None = None,
  label_position: Literal["before", "after"] = "after",
  disable_ripple: bool = False,
  tab_index: int = 0,
  color: Literal["primary", "accent", "warn"] | None = None,
  checked: bool = False,
  disabled: bool = False,
  indeterminate: bool = False,
  style: Style | None = None,
  key: str | None = None,
):
  """Creates a Checkbox component which is a composite component. Typically, you would use a text or icon component as a child.

  Intended for advanced use cases.

  Args:
    on_change: Event emitted when the checkbox's `checked` value changes.
    on_indeterminate_change: Event emitted when the checkbox's `indeterminate` value changes.
    label_position: Whether the label should appear after or before the checkbox. Defaults to 'after'
    disable_ripple: Whether the checkbox has a ripple.
    tab_index: Tabindex for the checkbox.
    color: Palette color of the checkbox.
    checked: Whether the checkbox is checked.
    disabled: Whether the checkbox is disabled.
    indeterminate: Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false.
    style: Style for the component.
    key: The component [key](../guides/components.md#component-key).
  """
  return insert_composite_component(
    key=key,
    type_name="content_checkbox",
    proto=checkbox_pb.CheckboxType(
      label_position=label_position,
      disable_ripple=disable_ripple,
      tab_index=tab_index,
      color=color,
      checked=checked,
      disabled=disabled,
      indeterminate=indeterminate,
      on_checkbox_change_event_handler_id=register_event_handler(
        on_change, event=CheckboxChangeEvent
      )
      if on_change
      else "",
      on_checkbox_indeterminate_change_event_handler_id=register_event_handler(
        on_indeterminate_change, event=CheckboxIndeterminateChangeEvent
      )
      if on_indeterminate_change
      else "",
    ),
    style=style,
  )


--- ./mesop/components/checkbox/e2e/__init__.py
from . import checkbox_app as checkbox_app


--- ./mesop/components/checkbox/e2e/checkbox_app.py
import mesop as me


@me.stateclass
class State:
  checked: bool = True
  indeterminate: bool = True


def on_update(event: me.CheckboxChangeEvent):
  state = me.state(State)
  state.checked = event.checked


@me.page(path="/components/checkbox/e2e/checkbox_app")
def app():
  state = me.state(State)
  me.checkbox(
    "label",
    on_change=on_update,
    checked=state.checked,
    disable_ripple=False,
    indeterminate=False,
    style=me.Style(
      border=me.Border.all(
        me.BorderSide(
          width=1,
          color="green",
          style="solid",
        )
      )
    ),
  )

  if state.checked:
    me.text(text="is checked")
  else:
    me.text(text="is not checked")


--- ./mesop/components/code/code.py
from mesop.component_helpers import component
from mesop.components.markdown.markdown import markdown


@component
def code(code: str = "", *, language: str = "python"):
  """
  Creates a code component which displays code with syntax highlighting.
  """
  markdown("``` " + language + "\n" + code + "\n" + "```")


--- ./mesop/components/slider/slider.py
from dataclasses import dataclass
from typing import Any, Callable, Literal

import mesop.components.slider.slider_pb2 as slider_pb
from mesop.component_helpers import (
  insert_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.events.events import MesopEvent


@dataclass(kw_only=True)
class SliderValueChangeEvent(MesopEvent):
  """
  Event triggered when the slider value changes.

  Attributes:
      value: The new value of the slider after the change.
      key (str): Key of the component that emitted this event.
  """

  value: float


register_event_mapper(
  SliderValueChangeEvent,
  lambda event, key: SliderValueChangeEvent(
    key=key.key,
    value=event.double_value,
  ),
)


@register_native_component
def slider(
  *,
  on_value_change: Callable[[SliderValueChangeEvent], Any] | None = None,
  min: float = 0,
  max: float = 100,
  step: float = 1,
  color: Literal["primary", "accent", "warn"] = "primary",
  disabled: bool = False,
  discrete: bool = False,
  show_tick_marks: bool = False,
  disable_ripple: bool = False,
  key: str | None = None,
):
  """Creates a Slider component.

  Args:
    on_value_change: An event will be dispatched each time the slider changes its value.
    min: The minimum value that the slider can have.
    max: The maximum value that the slider can have.
    step: The values at which the thumb will snap.
    disabled: Whether the slider is disabled.
    discrete: Whether the slider displays a numeric value label upon pressing the thumb.
    show_tick_marks: Whether the slider displays tick marks along the slider track.
    color: Palette color of the slider.
    disable_ripple: Whether ripples are disabled in the slider.
    key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="slider",
    proto=slider_pb.SliderType(
      disabled=disabled,
      discrete=discrete,
      show_tick_marks=show_tick_marks,
      min=min,
      color=color,
      disable_ripple=disable_ripple,
      max=max,
      step=step,
      on_value_change_handler_id=register_event_handler(
        on_value_change, SliderValueChangeEvent
      )
      if on_value_change
      else "",
    ),
  )


--- ./mesop/components/slider/e2e/__init__.py
from . import slider_app as slider_app


--- ./mesop/components/slider/e2e/slider_app.py
import mesop as me


@me.stateclass
class State:
  value: float = 0


def on_value_change(event: me.SliderValueChangeEvent):
  me.state(State).value = event.value


@me.page(path="/components/slider/e2e/slider_app")
def app():
  me.slider(on_value_change=on_value_change)
  me.text(text=f"Value: {me.state(State).value}")


--- ./mesop/components/image/image.py
import mesop.components.image.image_pb2 as image_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_native_component,
)


@register_native_component
def image(
  *,
  src: str | None = None,
  alt: str | None = None,
  style: Style | None = None,
  key: str | None = None,
):
  """
  This function creates an image component.

  Args:
      src: The source URL of the image.
      alt: The alternative text for the image if it cannot be displayed.
      style: The style to apply to the image, such as width and height.
      key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="image",
    proto=image_pb.ImageType(
      src=src,
      alt=alt,
    ),
    style=style,
  )


--- ./mesop/components/image/e2e/__init__.py
from . import image_app as image_app


--- ./mesop/components/image/e2e/image_app.py
import mesop as me


@me.page(path="/components/image/e2e/image_app")
def app():
  me.image(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg",
    alt="Grapefruit",
    style=me.Style(width="150px", height="150px"),
  )


--- ./mesop/components/audio/audio.py
import mesop.components.audio.audio_pb2 as audio_pb
from mesop.component_helpers import insert_component, register_native_component


@register_native_component
def audio(
  *,
  src: str | None = None,
  key: str | None = None,
):
  """
  Creates an audio component.

  Args:
      src: The URL of the audio to be played.
      key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="audio",
    proto=audio_pb.AudioType(
      src=src,
    ),
  )


--- ./mesop/components/audio/e2e/__init__.py
from . import audio_app as audio_app


--- ./mesop/components/audio/e2e/audio_app.py
import mesop as me


@me.page(path="/components/audio/e2e/audio_app")
def app():
  me.audio(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3",
  )


--- ./mesop/components/button/button.py
from typing import Any, Callable, Literal

import mesop.components.button.button_pb2 as button_pb
from mesop.component_helpers import (
  Style,
  component,
  insert_composite_component,
  register_event_handler,
  register_native_component,
)
from mesop.components.text.text import text
from mesop.events import ClickEvent


@component
def button(
  label: str | None = None,
  *,
  on_click: Callable[[ClickEvent], Any] | None = None,
  type: Literal["raised", "flat", "stroked"] | None = None,
  color: Literal["primary", "accent", "warn"] | None = None,
  disable_ripple: bool = False,
  disabled: bool = False,
  style: Style | None = None,
  key: str | None = None,
):
  """Creates a simple text Button component.

  Args:
    label: Text label for button
    on_click: [click](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click_event) is a native browser event.
    type: Type of button style to use
    color: Theme color palette of the button
    disable_ripple: Whether the ripple effect is disabled or not.
    disabled: Whether the button is disabled.
    style: Style for the component.
    key: The component [key](../guides/components.md#component-key).
  """
  with content_button(
    on_click=on_click,
    type=type,
    color=color,
    disable_ripple=disable_ripple,
    disabled=disabled,
    style=style,
    key=key,
  ):
    text(label)


@register_native_component
def content_button(
  *,
  on_click: Callable[[ClickEvent], Any] | None = None,
  type: Literal["raised", "flat", "stroked", "icon"] | None = None,
  color: Literal["primary", "accent", "warn"] | None = None,
  disable_ripple: bool = False,
  disabled: bool = False,
  style: Style | None = None,
  key: str | None = None,
):
  """Creates a button component, which is a composite component. Typically, you would use a text or icon component as a child.

  Intended for advanced use cases.

  Args:
    on_click: [click](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click_event) is a native browser event.
    type: Type of button style to use
    color: Theme color palette of the button
    disable_ripple: Whether the ripple effect is disabled or not.
    disabled: Whether the button is disabled.
    style: Style for the component.
    key: The component [key](../guides/components.md#component-key).
  """
  return insert_composite_component(
    key=key,
    type_name="content_button",
    proto=button_pb.ButtonType(
      color=color,
      disable_ripple=disable_ripple,
      disabled=disabled,
      on_click_handler_id=register_event_handler(on_click, event=ClickEvent)
      if on_click
      else "",
      type_index=_get_type_index(type),
      type=type,
    ),
    style=style,
  )


def _get_type_index(
  type: Literal["raised", "flat", "stroked", "icon"] | None,
) -> int:
  if type is None:
    return 0
  if type == "raised":
    return 1
  if type == "flat":
    return 2
  if type == "stroked":
    return 3
  if type == "icon":
    return 4
  raise Exception("Unexpected type: " + type)


--- ./mesop/components/table/table.py
from dataclasses import dataclass
from typing import Any, Callable

import mesop.components.table.table_pb2 as table_pb
from mesop.component_helpers import (
  insert_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.events import MesopEvent


@dataclass(kw_only=True)
class TableClickEvent(MesopEvent):
  """Event representing a click on the table component cell.

  Attributes:
      row_index: DataFrame row index of the clicked cell in the table.
      col_index: DataFrame col index of the clicked cell in the table.
      key (str): key of the component that emitted this event.
  """

  row_index: int
  col_index: int


def map_table_click_event(event, key):
  click_event = table_pb.TableClickEvent()
  click_event.ParseFromString(event.bytes_value)
  return TableClickEvent(
    key=key.key,
    row_index=click_event.row_index,
    col_index=click_event.col_index,
  )


register_event_mapper(TableClickEvent, map_table_click_event)


@dataclass(kw_only=True)
class TableHeader:
  sticky: bool = False


@dataclass(kw_only=True)
class TableColumn:
  sticky: bool = False


# Don't include type hint since Pydantic can't properly type check the Pandas data
# frame. In addition, we don't want to include Pandas as a dependency into Mesop.
@register_native_component
def table(
  data_frame: Any,
  *,
  on_click: Callable[[TableClickEvent], Any] | None = None,
  header: TableHeader | None = None,
  columns: dict[str, TableColumn] | None = None,
):
  """
  This function creates a table from Pandas data frame

  Args:
      data_frame: Pandas data frame.
      on_click: Triggered when a table cell is clicked. The [click event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click_event) is a native browser event.
      header: Configures table header to be sticky or not.
      columns: Configures table columns to be sticky or not. The key is the name of the column.
  """
  if not columns:
    columns = {}
  if not header:
    header = TableHeader()
  insert_component(
    type_name="table",
    proto=table_pb.TableType(
      displayed_columns=list(data_frame.columns),
      data_source=_to_data_source(data_frame),
      on_table_click_event_handler_id=register_event_handler(
        on_click, event=TableClickEvent
      )
      if on_click
      else "",
      header=table_pb.TableHeader(sticky=header.sticky),
      columns={
        column_name: table_pb.TableColumn(sticky=column.sticky)
        for column_name, column in columns.items()
      },
    ),
  )


def _to_data_source(data_frame) -> list[table_pb.TableRow]:
  """Convert Pandas data frame for display as a table.

  All values will be converted to strings for display purposes on the frontend.

  The special Pandas `Index` column is included automatically, so we can refer back to
  same cell on the server to handle user events.
  """
  data = []
  for df_row in data_frame.itertuples(name=None):
    data.append(
      table_pb.TableRow(
        index=df_row[0],
        cell_values=[str(row) for row in df_row[1:]],
      )
    )
  return data


--- ./mesop/components/table/e2e/__init__.py
from . import table_app as table_app


--- ./mesop/components/table/e2e/table_app.py
from datetime import datetime

import numpy as np
import pandas as pd

import mesop as me


@me.stateclass
class State:
  selected_cell: str = "No cell selected."


df = pd.DataFrame(
  data={
    "NA": [pd.NA, pd.NA, pd.NA],
    "Index": [3, 2, 1],
    "Bools": [True, False, np.bool_(True)],
    "Ints": [101, 90, np.int64(-55)],
    "Floats": [2.3, 4.5, np.float64(-3.000000003)],
    "Strings": ["Hello", "World", "!"],
    "Date Times": [
      pd.Timestamp("20180310"),
      pd.Timestamp("20230310"),
      datetime(2023, 1, 1, 12, 12, 1),
    ],
  }
)


@me.page(path="/components/table/e2e/table_app")
def app():
  state = me.state(State)

  with me.box(style=me.Style(padding=me.Padding.all(10), width=500)):
    me.table(
      df,
      on_click=on_click,
      header=me.TableHeader(sticky=True),
      columns={
        "NA": me.TableColumn(sticky=True),
        "Index": me.TableColumn(sticky=True),
      },
    )

  with me.box(
    style=me.Style(
      background="#ececec",
      margin=me.Margin.all(10),
      padding=me.Padding.all(10),
    )
  ):
    me.text(state.selected_cell)


def on_click(e: me.TableClickEvent):
  state = me.state(State)
  state.selected_cell = (
    f"Selected cell at col {e.col_index} and row {e.row_index} "
    f"with value {str(df.iat[e.row_index, e.col_index])}"
  )


--- ./mesop/components/divider/divider.py
import mesop.components.divider.divider_pb2 as divider_pb
from mesop.component_helpers import (
  insert_component,
  register_native_component,
)


@register_native_component
def divider(*, key: str | None = None, inset: bool = False):
  """Creates a Divider component.

  Args:
    key: The component [key](../guides/components.md#component-key).
    inset: Whether the divider is an inset divider.
  """
  insert_component(
    key=key,
    type_name="divider",
    proto=divider_pb.DividerType(inset=inset),
  )


--- ./mesop/components/divider/e2e/divider_app.py
import mesop as me


@me.page(path="/components/divider/e2e/divider_app")
def app():
  me.text(text="before")
  me.divider()
  me.text(text="after")


--- ./mesop/components/divider/e2e/__init__.py
from . import divider_app as divider_app


--- ./mesop/components/text/text.py
from typing import Literal

import mesop.components.text.text_pb2 as text_pb2
from mesop.component_helpers import (
  Style,
  insert_component,
  register_native_component,
)


@register_native_component
def text(
  text: str | None = None,
  *,
  type: Literal[
    "headline-1",
    "headline-2",
    "headline-3",
    "headline-4",
    "headline-5",
    "headline-6",
    "subtitle-1",
    "subtitle-2",
    "body-1",
    "body-2",
    "caption",
    "button",
  ]
  | None = None,
  style: Style | None = None,
  key: str | None = None,
):
  """
  Create a text component.

  Args:
      text: The text to display.
      type: The typography level for the text.
      style: Style to apply to component. Follows [HTML Element inline style API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style).
      key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="text",
    proto=text_pb2.TextType(
      text=text,
      type=type,
    ),
    style=style,
  )


--- ./mesop/components/text/e2e/__init__.py
from . import text_app as text_app


--- ./mesop/components/text/e2e/text_app.py
import mesop as me


@me.page(path="/components/text/e2e/text_app")
def text():
  me.text(text="H1: Hello, world!", type="headline-1")


--- ./mesop/components/select/select.py
from dataclasses import dataclass
from typing import Any, Callable, Iterable

import mesop.components.select.select_pb2 as select_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.events import MesopEvent


@dataclass(kw_only=True)
class SelectOpenedChangeEvent(MesopEvent):
  """Event representing the opened state change of the select component.

  Attributes:
      opened: A boolean indicating whether the select component is opened (True) or closed (False).
      key (str): key of the component that emitted this event.
  """

  opened: bool


register_event_mapper(
  SelectOpenedChangeEvent,
  lambda event, key: SelectOpenedChangeEvent(
    key=key.key,
    opened=event.bool_value,
  ),
)


@dataclass(kw_only=True)
class SelectSelectionChangeEvent(MesopEvent):
  """Event representing a change in the select component's value.

  Attributes:
      value: The new value of the select component after the change.
      key (str): Key of the component that emitted this event.
  """

  value: str


register_event_mapper(
  SelectSelectionChangeEvent,
  lambda event, key: SelectSelectionChangeEvent(
    key=key.key,
    value=event.string_value,
  ),
)


@dataclass(kw_only=True)
class SelectOption:
  """Represents an option within a select component.

  Attributes:
      label: The content shown for the select option.
      value: The value associated with the select option.
  """

  label: str | None = None
  value: str | None = None


@register_native_component
def select(
  *,
  options: Iterable[SelectOption] = (),
  on_selection_change: Callable[[SelectSelectionChangeEvent], Any]
  | None = None,
  on_opened_change: Callable[[SelectOpenedChangeEvent], Any] | None = None,
  key: str | None = None,
  label: str = "",
  disabled: bool = False,
  disable_ripple: bool = False,
  tab_index: int = 0,
  placeholder: str = "",
  value: str = "",
  style: Style | None = None,
):
  """Creates a Select component.

  Args:
    options: List of select options.
    on_selection_change: Event emitted when the selected value has been changed by the user.
    on_opened_change: Event emitted when the select panel has been toggled.
    disabled: Whether the select is disabled.
    disable_ripple: Whether ripples in the select are disabled.
    tab_index: Tab index of the select.
    placeholder: Placeholder to be shown if no value has been selected.
    value: Value of the select control.
    style: Style.
    key: The component [key](../guides/components.md#component-key).
  """
  insert_component(
    key=key,
    type_name="select",
    style=style,
    proto=select_pb.SelectType(
      options=[
        select_pb.SelectOption(label=option.label, value=option.value)
        for option in options
      ],
      label=label,
      disabled=disabled,
      disable_ripple=disable_ripple,
      tab_index=tab_index,
      placeholder=placeholder,
      value=value,
      on_select_opened_change_event_handler_id=register_event_handler(
        on_opened_change, event=SelectOpenedChangeEvent
      )
      if on_opened_change
      else "",
      on_select_selection_change_event_handler_id=register_event_handler(
        on_selection_change, event=SelectSelectionChangeEvent
      )
      if on_selection_change
      else "",
    ),
  )


--- ./mesop/components/select/e2e/select_app.py
import mesop as me


@me.stateclass
class State:
  selected_value: str = ""


def on_selection_change(e: me.SelectSelectionChangeEvent):
  s = me.state(State)
  s.selected_value = e.value


@me.page(path="/components/select/e2e/select_app")
def app():
  me.text(text="Select")
  me.select(
    label="Select",
    options=[
      me.SelectOption(label="label 1", value="value1"),
      me.SelectOption(label="label 2", value="value2"),
      me.SelectOption(label="label 3", value="value3"),
    ],
    on_selection_change=on_selection_change,
    style=me.Style(width=500),
  )
  s = me.state(State)
  me.text(text="Selected value: " + s.selected_value)


--- ./mesop/components/select/e2e/__init__.py
from . import select_app as select_app


--- ./mesop/components/icon/icon.py
import mesop.components.icon.icon_pb2 as icon_pb
from mesop.component_helpers import (
  Style,
  insert_component,
  register_native_component,
)


@register_native_component
def icon(
  icon: str | None = None,
  *,
  key: str | None = None,
  style: Style | None = None,
):
  """Creates a Icon component.

  Args:
    key: The component [key](../guides/components.md#component-key).
    icon: Name of the [Material Symbols icon](https://fonts.google.com/icons).
    style: Inline styles
  """
  insert_component(
    key=key,
    type_name="icon",
    proto=icon_pb.IconType(
      icon=icon,
    ),
    style=style,
  )


--- ./mesop/components/icon/e2e/icon_app.py
import mesop as me


@me.page(path="/components/icon/e2e/icon_app")
def app():
  me.text(text="Hello, world!")
  me.icon(icon="home", style=me.Style(color="orange"))


--- ./mesop/components/icon/e2e/__init__.py
from . import icon_app as icon_app


--- ./mesop/components/slide_toggle/slide_toggle.py
from dataclasses import dataclass
from typing import Any, Callable, Literal

import mesop.components.slide_toggle.slide_toggle_pb2 as slide_toggle_pb
from mesop.component_helpers import (
  component,
  insert_composite_component,
  register_event_handler,
  register_event_mapper,
  register_native_component,
)
from mesop.components.text.text import text
from mesop.events import MesopEvent


@dataclass(kw_only=True)
class SlideToggleChangeEvent(MesopEvent):
  """Event triggered when the slide toggle state changes.

  Attributes:
      key (str): Key of the component that emitted this event.
  """

  key: str


register_event_mapper(
  SlideToggleChangeEvent,
  lambda event, key: SlideToggleChangeEvent(
    key=key.key,
  ),
)


@component()
def slide_toggle(
  label: str | None = None,
  *,
  key: str | None = None,
  label_position: Literal["before", "after"] = "after",
  required: bool = False,
  color: Literal["primary", "accent", "warn"] | None = None,
  disabled: bool = False,
  disable_ripple: bool = False,
  tab_index: int = 0,
  checked: bool = False,
  hide_icon: bool = False,
  on_change: Callable[[SlideToggleChangeEvent], Any] | None = None,
):
  """Creates a simple Slide toggle component with a text label.

  Args:
    label: Text label for slide toggle
    on_change: An event will be dispatched each time the slide-toggle changes its value.
    label_position: Whether the label should appear after or before the slide-toggle. Defaults to 'after'.
    required: Whether the slide-toggle is required.
    color: Palette color of slide toggle.
    disabled: Whether the slide toggle is disabled.
    disable_ripple: Whether the slide toggle has a ripple.
    tab_index: Tabindex of slide toggle.
    checked: Whether the slide-toggle element is checked or not.
    hide_icon: Whether to hide the icon inside of the slide toggle.
    key: The component [key](../guides/components.md#component-key).
  """
  with content_slide_toggle(
    key=key,
    label_position=label_position,
    required=required,
    color=color,
    disabled=disabled,
    disable_ripple=disable_ripple,
    tab_index=tab_index,
    checked=checked,
    hide_icon=hide_icon,
    on_change=on_change,
  ):
    text(label)


@register_native_component
def content_slide_toggle(
  *,
  key: str | None = None,
  label_position: Literal["before", "after"] = "after",
  required: bool = False,
  color: Literal["primary", "accent", "warn"] | None = None,
  disabled: bool = False,
  disable_ripple: bool = False,
  tab_index: int = 0,
  checked: bool = False,
  hide_icon: bool = False,
  on_change: Callable[[SlideToggleChangeEvent], Any] | None = None,
):
  """Creates a Slide toggle component which is a composite component. Typically, you would use a text or icon component as a child.

  Intended for advanced use cases.


  Args:
    on_change: An event will be dispatched each time the slide-toggle changes its value.
    label_position: Whether the label should appear after or before the slide-toggle. Defaults to 'after'.
    required: Whether the slide-toggle is required.
    color: Palette color of slide toggle.
    disabled: Whether the slide toggle is disabled.
    disable_ripple: Whether the slide toggle has a ripple.
    tab_index: Tabindex of slide toggle.
    checked: Whether the slide-toggle element is checked or not.
    hide_icon: Whether to hide the icon inside of the slide toggle.
    key: The component [key](../guides/components.md#component-key).
  """
  return insert_composite_component(
    key=key,
    type_name="content_slide_toggle",
    proto=slide_toggle_pb.SlideToggleType(
      label_position=label_position,
      required=required,
      color=color,
      disabled=disabled,
      disable_ripple=disable_ripple,
      tab_index=tab_index,
      checked=checked,
      hide_icon=hide_icon,
      on_slide_toggle_change_event_handler_id=register_event_handler(
        on_change, event=SlideToggleChangeEvent
      )
      if on_change
      else "",
    ),
  )


--- ./mesop/components/slide_toggle/e2e/slide_toggle_app.py
import mesop as me


@me.stateclass
class State:
  toggled: bool = False


def on_change(event: me.SlideToggleChangeEvent):
  s = me.state(State)
  s.toggled = not s.toggled


@me.page(path="/components/slide_toggle/e2e/slide_toggle_app")
def app():
  me.slide_toggle(label="hi", on_change=on_change)
  with me.content_slide_toggle(on_change=on_change):
    me.text("content_slide_toggle")
  s = me.state(State)
  me.text(text=f"Toggled: {s.toggled}")


--- ./mesop/components/slide_toggle/e2e/__init__.py
from . import slide_toggle_app as slide_toggle_app


--- ./mesop/components/badge/badge.py
from typing import Literal

import mesop.components.badge.badge_pb2 as badge_pb
from mesop.component_helpers import (
  insert_composite_component,
  register_native_component,
)


@register_native_component
def badge(
  *,
  color: Literal["primary", "accent", "warn"] = "primary",
  overlap: bool = False,
  disabled: bool = False,
  position: Literal[
    "above after",
    "above before",
    "below before",
    "below after",
    "before",
    "after",
    "above",
    "below",
  ] = "above after",
  content: str = "",
  description: str = "",
  size: Literal["small", "medium", "large"] = "small",
  hidden: bool = False,
  key: str | None = None,
):
  """Creates a Badge component.
  Badge is a composite component.

  Args:
    color: The color of the badge. Can be `primary`, `accent`, or `warn`.
    overlap: Whether the badge should overlap its contents or not
    disabled: Whether the badge is disabled.
    position: Position the badge should reside. Accepts any combination of 'above'|'below' and 'before'|'after'
    content: The content for the badge
    description: Message used to describe the decorated element via aria-describedby
    size: Size of the badge. Can be 'small', 'medium', or 'large'.
    hidden: Whether the badge is hidden.
    key: The component [key](../guides/components.md#component-key).
  """
  return insert_composite_component(
    key=key,
    type_name="badge",
    proto=badge_pb.BadgeType(
      color=color,
      overlap=overlap,
      disabled=disabled,
      position=position,
      content=content,
      description=description,
      size=size,
      hidden=hidden,
    ),
  )


--- ./mesop/components/badge/e2e/__init__.py
from . import badge_app as badge_app


--- ./mesop/components/badge/e2e/badge_app.py
import mesop as me


@me.page(path="/components/badge/e2e/badge_app")
def app():
  with me.box(
    style=me.Style(
      display="block",
      padding=me.Padding(top=16, right=16, bottom=16, left=16),
      height=50,
      width=30,
      background="pink",
    )
  ):
    with me.badge(content="1"):
      me.text(text="some badge")


--- ./mesop/component_helpers/style.py
from dataclasses import dataclass
from typing import Literal

import mesop.protos.ui_pb2 as pb

ContentAlignmentValues = Literal[
  "center",
  "start",
  "end",
  "flex",
  "flex",
  "left",
  "right",
  "space-between",
  "space-around",
  "space-evenly",
  "stretch",
]
ItemAlignmentValues = Literal[
  "normal",
  "stretch",
  "center",
  "start",
  "end",
]
OverflowValues = Literal["visible", "hidden", "clip", "scroll", "auto"]
OverflowWrapValues = Literal["normal", "break-word", "anywhere"]


@dataclass(kw_only=True)
class BorderSide:
  """
  Represents the style of a single side of a border in a UI component.

  Attributes:
      width: The width of the border. Can be specified as an integer value representing pixels,
                                a string with a unit (e.g., '2em'), or None for no width.
      color: The color of the border, represented as a string. This can be any valid CSS color value,
                          or None for no color.
      style: The style of the border, which can be 'none' for no border, 'solid' for a solid line.
  """

  width: int | str | None = None
  color: str | None = None
  style: Literal["none", "solid"] | None = None


@dataclass(kw_only=True)
class Border:
  """
  Defines the border styles for each side of a UI component.

  Attributes:
      top: Style for the top border.
      right: Style for the right border.
      bottom: Style for the bottom border.
      left: Style for the left border.
  """

  top: BorderSide | None = None
  right: BorderSide | None = None
  bottom: BorderSide | None = None
  left: BorderSide | None = None

  @staticmethod
  def all(value: BorderSide) -> "Border":
    """
    Creates a Border instance with all sides having the same style.

    Args:
        value: The style to apply to all sides of the border.

    Returns:
        Border: A new Border instance with the specified style applied to all sides.
    """
    return Border(top=value, right=value, bottom=value, left=value)

  @staticmethod
  def symmetric(
    *, vertical: BorderSide | None = None, horizontal: BorderSide | None = None
  ) -> "Border":
    """
    Creates a Border instance with symmetric styles for vertical and horizontal sides.

    Args:
        vertical: The style to apply to the top and bottom sides of the border.
        horizontal: The style to apply to the right and left sides of the border.

    Returns:
        Border: A new Border instance with the specified styles applied symmetrically.
    """
    return Border(
      top=vertical, right=horizontal, bottom=vertical, left=horizontal
    )


@dataclass(kw_only=True)
class _EdgeInsets:
  top: int | str | None = None
  right: int | str | None = None
  bottom: int | str | None = None
  left: int | str | None = None


@dataclass(kw_only=True)
class Margin(_EdgeInsets):
  """
  Defines the margin space around a UI component.

  Attributes:
      top: Top margin (note: `2` is the same as `2px`)
      right: Right margin
      bottom: Bottom margin
      left: Left margin
  """

  top: int | str | None = None
  right: int | str | None = None
  bottom: int | str | None = None
  left: int | str | None = None

  @staticmethod
  def all(value: int | str) -> "Margin":
    """
    Creates a Margin instance with the same value for all sides.

    Args:
        value: The value to apply to all sides of the margin. Can be an integer (pixel value) or a string.

    Returns:
        Margin: A new Margin instance with the specified value applied to all sides.
    """
    return Margin(top=value, right=value, bottom=value, left=value)

  @staticmethod
  def symmetric(
    *, vertical: int | str | None = None, horizontal: int | str | None = None
  ) -> "Margin":
    """
    Creates a Margin instance with symmetric values for vertical and horizontal sides.

    Args:
        vertical: The value to apply to the top and bottom sides of the margin. Can be an integer (pixel value) or a string.
        horizontal: The value to apply to the right and left sides of the margin. Can be an integer (pixel value) or a string.

    Returns:
        Margin: A new Margin instance with the specified values applied to the vertical and horizontal sides.
    """
    return Margin(
      top=vertical, right=horizontal, bottom=vertical, left=horizontal
    )


@dataclass(kw_only=True)
class Padding(_EdgeInsets):
  """
  Defines the padding space around a UI component.

  Attributes:
      top: Top padding (note: `2` is the same as `2px`)
      right: Right padding
      bottom: Bottom padding
      left: Left padding
  """

  top: int | str | None = None
  right: int | str | None = None
  bottom: int | str | None = None
  left: int | str | None = None

  @staticmethod
  def all(value: int | str) -> "Padding":
    """
    Creates a Padding instance with the same value for all sides.

    Args:
        value: The value to apply to all sides of the padding. Can be an integer (pixel value) or a string.

    Returns:
        Padding: A new Padding instance with the specified value applied to all sides.
    """
    return Padding(top=value, right=value, bottom=value, left=value)

  @staticmethod
  def symmetric(
    *, vertical: int | str | None = None, horizontal: int | str | None = None
  ) -> "Padding":
    """
    Creates a Padding instance with symmetric values for vertical and horizontal sides.

    Args:
        vertical: The value to apply to the top and bottom sides of the padding. Can be an integer (pixel value) or a string.
        horizontal: The value to apply to the right and left sides of the padding. Can be an integer (pixel value) or a string.

    Returns:
        Padding: A new Padding instance with the specified values applied to the vertical and horizontal sides.
    """
    return Padding(
      top=vertical, right=horizontal, bottom=vertical, left=horizontal
    )


@dataclass(kw_only=True)
class Style:
  """
  Represents the style configuration for a UI component.

  Attributes:
      align_content: Aligns the flexible container's items on the cross-axis. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content).
      align_items: Specifies the default alignment for items inside a flexible container. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items).
      aspect_ratio: Specifies the desired width-to-height ratio of a component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio).
      background: Sets the background color or image of the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/background).
      border: Defines the border properties for each side of the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/border).
      border_radius: Defines the border radius. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius).
      box_shadow: Defines the box shadow. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).
      box_sizing: Defines the box sizing. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing).
      color: Sets the color of the text inside the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/color).
      column_gap: Sets the gap between columns. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap).
      columns: Specifies the number of columns in a multi-column element. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/columns).
      cursor: Sets the mouse cursor. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor).
      display: Defines the display type of the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/display).
      flex_basis: Specifies the initial length of a flexible item. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis).
      flex_direction: Establishes the main-axis, thus defining the direction flex items are placed in the flex container. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction).
      flex_grow: Defines the ability for a flex item to grow if necessary. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow).
      flex_shrink: Defines the ability for a flex item to shrink if necessary. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink).
      flex_wrap: Allows flex items to wrap onto multiple lines. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap).
      font_family: Specifies the font family. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family).
      font_size: Sets the size of the font. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size).
      font_style: Specifies the font style for text. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style).
      font_weight: Sets the weight (or boldness) of the font. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight).
      gap: Sets the gap. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/gap).
      grid_area: Sets the grid area. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area).
      grid_column_start: Sets the grid column start. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start).
      grid_column_end: Sets the grid column end. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end).
      grid_row_start: Sets the grid row start. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start).
      grid_row_end: Sets the grid row end. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end).
      grid_template_areas: Sets the grid template areas; each element is a row. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas).
      grid_template_columns: Sets the grid template columns. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns).
      grid_template_rows: Sets the grid template rows. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows).
      height: Sets the height of the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/height).
      justify_content: Aligns the flexible container's items on the main-axis. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content).
      letter_spacing: Increases or decreases the space between characters in text. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing).
      line height: Set the line height (relative to the font size). See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height).
      margin: Sets the margin space required on each side of an element. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/margin).
      outline: Sets the outline property. Note: `input` component has default browser stylings. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/outline).
      overflow_wrap: Specifies how long text can be broken up by new lines to prevent overflowing. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap).
      overflow_x: Specifies the handling of overflow in the horizontal direction. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x).
      overflow_y: Specifies the handling of overflow in the vertical direction. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y).
      padding: Sets the padding space required on each side of an element. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/padding).
      position: Specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky). See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/position).
      row_gap: Sets the gap between rows. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap).
      text_align: Specifies the horizontal alignment of text in an element. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align).
      text_decoration: Specifies the decoration added to text. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration).
      text_overflow: Specifies how overflowed content that is not displayed should be signaled to the user. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow).
      white_space: Specifies how white space inside an element is handled. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space).
      width: Sets the width of the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/width).
      z-index: Sets the z-index of the component. See [MDN doc](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index).
  """

  # For literal properties, make the most commonly used option the first literal
  # element, as it will be used as the default value by the editor when creating that property.

  align_content: ContentAlignmentValues | None = None
  align_items: ItemAlignmentValues | None = None
  aspect_ratio: str | None = None
  background: str | None = None
  border: Border | None = None
  border_radius: int | str | None = None
  box_shadow: str | None = None
  box_sizing: str | None = None
  color: str | None = None
  column_gap: int | str | None = None
  columns: int | str | None = None
  cursor: str | None = None
  display: (
    Literal[
      # precomposed values
      "block",
      "inline",
      "inline-block",
      "flex",
      "inline-flex",
      "grid",
      "inline-grid",
      # box generation
      "none",
      "contents",
    ]
    | None
  ) = None
  flex_basis: str | None = None
  flex_direction: (
    Literal[
      "row",
      "row-reverse",
      "column",
      "column-reverse",
    ]
    | None
  ) = None
  flex_grow: int | None = None
  flex_shrink: int | None = None
  flex_wrap: Literal["nowrap", "wrap", "wrap-reverse"] | None = None
  font_family: str | None = None
  font_size: int | str | None = None
  font_style: Literal["italic", "normal"] | None = None
  font_weight: (
    Literal[
      "bold",
      "normal",
      100,
      200,
      300,
      400,
      500,
      600,
      700,
      800,
      900,
    ]
    | None
  ) = None
  gap: int | str | None = None
  grid_area: str | None = None
  grid_column_start: int | None = None
  grid_column_end: int | None = None
  grid_row_start: int | None = None
  grid_row_end: int | None = None
  grid_template_areas: list[str] | None = None
  grid_template_columns: str | None = None
  grid_template_rows: str | None = None
  height: int | str | None = None
  justify_content: ContentAlignmentValues | None = None
  justify_items: ItemAlignmentValues | None = None
  letter_spacing: int | str | None = None
  line_height: str | None = None
  margin: Margin | None = None
  outline: str | None = None
  overflow_wrap: OverflowWrapValues | None = None
  overflow_x: OverflowValues | None = None
  overflow_y: OverflowValues | None = None
  padding: Padding | None = None
  position: (
    Literal[
      "static",
      "relative",
      "absolute",
      "fixed",
      "sticky",
    ]
    | None
  ) = None
  row_gap: int | str | None = None
  text_align: (
    Literal[
      "start",
      "end",
      "left",
      "right",
      "center",
    ]
    | None
  ) = None
  text_decoration: Literal["underline", "none"] | None = None
  text_overflow: Literal["ellipsis", "clip"] | None = None
  white_space: (
    Literal[
      "normal",
      "nowrap",
      "pre",
      "pre-wrap",
      "pre-line",
      "break-spaces",
    ]
    | None
  ) = None
  width: int | str | None = None
  z_index: int | None = None


def to_style_proto(s: Style) -> pb.Style:
  return pb.Style(
    align_content=s.align_content,
    align_items=s.align_items,
    aspect_ratio=s.aspect_ratio,
    background=s.background,
    border=_map_border(s.border),
    border_radius=_px_str(s.border_radius),
    box_shadow=s.box_shadow,
    box_sizing=s.box_sizing,
    color=s.color,
    column_gap=_px_str(s.column_gap),
    columns=str(s.columns),
    cursor=s.cursor,
    display=s.display,
    flex_basis=s.flex_basis,
    flex_direction=s.flex_direction,
    flex_grow=s.flex_grow,
    flex_shrink=str(s.flex_shrink),
    flex_wrap=s.flex_wrap,
    font_family=s.font_family,
    font_size=_px_str(s.font_size),
    font_style=s.font_style,
    font_weight=_map_font_weight(s.font_weight),
    gap=_px_str(s.gap),
    grid_area=s.grid_area,
    grid_column_start=s.grid_column_start,
    grid_column_end=s.grid_column_end,
    grid_row_start=s.grid_row_start,
    grid_row_end=s.grid_row_end,
    grid_template_areas=s.grid_template_areas,
    grid_template_columns=s.grid_template_columns,
    grid_template_rows=s.grid_template_rows,
    height=_px_str(s.height),
    justify_content=s.justify_content,
    justify_items=s.justify_items,
    letter_spacing=_px_str(s.letter_spacing),
    line_height=str(s.line_height),
    margin=_map_edge_insets(s.margin),
    outline=s.outline,
    overflow_wrap=s.overflow_wrap,
    overflow_x=s.overflow_x,
    overflow_y=s.overflow_y,
    padding=_map_edge_insets(s.padding),
    position=s.position,
    row_gap=_px_str(s.row_gap),
    text_align=s.text_align,
    text_decoration=s.text_decoration,
    text_overflow=s.text_overflow,
    white_space=s.white_space,
    width=_px_str(s.width),
    z_index=s.z_index,
  )


def _map_font_weight(fw: int | str | None) -> str:
  if fw is None:
    return ""
  return str(fw)


def _map_edge_insets(e: _EdgeInsets | None) -> pb.EdgeInsets | None:
  if e is None:
    return None
  return pb.EdgeInsets(
    top=_px_str(e.top),
    bottom=_px_str(e.bottom),
    left=_px_str(e.left),
    right=_px_str(e.right),
  )


def _map_border(b: Border | None) -> pb.Border | None:
  if b is None:
    return None
  return pb.Border(
    top=_map_border_side(b.top),
    bottom=_map_border_side(b.bottom),
    left=_map_border_side(b.left),
    right=_map_border_side(b.right),
  )


def _map_border_side(bs: BorderSide | None) -> pb.BorderSide | None:
  if bs is None:
    return None
  return pb.BorderSide(width=_px_str(bs.width), color=bs.color, style=bs.style)


def _px_str(int_or_str: int | str | None) -> str | None:
  if isinstance(int_or_str, int):
    return str(int_or_str) + "px"
  return int_or_str


These are example applications you can build with Mesop:--- ./demo/icon.py
import mesop as me


@me.page(path="/icon")
def app():
  me.text("home icon")
  me.icon(icon="home")


--- ./demo/sidenav.py
import mesop as me


@me.stateclass
class State:
  sidenav_open: bool


def on_click(e: me.ClickEvent):
  s = me.state(State)
  s.sidenav_open = not s.sidenav_open


SIDENAV_WIDTH = 200


@me.page(path="/sidenav")
def app():
  state = me.state(State)
  with me.sidenav(
    opened=state.sidenav_open, style=me.Style(width=SIDENAV_WIDTH)
  ):
    me.text("Inside sidenav")

  with me.box(
    style=me.Style(
      margin=me.Margin(left=SIDENAV_WIDTH if state.sidenav_open else 0),
    ),
  ):
    with me.content_button(on_click=on_click):
      me.icon("menu")
    me.markdown("Main content")


--- ./demo/textarea.py
import mesop as me


@me.stateclass
class State:
  input: str = ""


def on_input(e: me.InputEvent):
  state = me.state(State)
  state.input = e.value


@me.page(path="/textarea")
def app():
  s = me.state(State)
  me.textarea(label="Basic input", on_input=on_input)
  me.text(text=s.input)


--- ./demo/box.py
import mesop as me


@me.page(path="/box")
def app():
  with me.box(style=me.Style(background="red", padding=me.Padding.all(16))):
    with me.box(
      style=me.Style(
        background="green",
        height=50,
        margin=me.Margin.symmetric(vertical=24, horizontal=12),
        border=me.Border.symmetric(
          horizontal=me.BorderSide(width=2, color="pink", style="solid"),
          vertical=me.BorderSide(width=2, color="orange", style="solid"),
        ),
      )
    ):
      me.text(text="hi1")
      me.text(text="hi2")


--- ./demo/plot.py
from matplotlib.figure import Figure

import mesop as me


@me.page(path="/plot")
def app():
  # Create matplotlib figure without using pyplot:
  fig = Figure()
  ax = fig.subplots()  # type: ignore
  ax.plot([1, 2])  # type: ignore

  me.text("Example using matplotlib:")
  me.plot(fig, style=me.Style(width="100%"))


--- ./demo/text_to_image.py
import mesop as me
import mesop.labs as mel


@me.page(path="/text_to_image", title="Text to Image Example")
def app():
  mel.text_to_image(
    generate_image,
    title="Text to Image Example",
  )


def generate_image(prompt: str):
  return "https://www.google.com/logos/doodles/2024/earth-day-2024-6753651837110453-2xa.gif"


--- ./demo/embed.py
import mesop as me


@me.page(path="/embed")
def app():
  src = "https://google.github.io/mesop/"
  me.text("Embedding: " + src)
  me.embed(
    src=src,
    style=me.Style(width="100%", height="100%"),
  )


--- ./demo/progress_spinner.py
import mesop as me


@me.page(path="/progress_spinner")
def app():
  me.progress_spinner()


--- ./demo/divider.py
import mesop as me


@me.page(path="/divider")
def app():
  me.text(text="before")
  me.divider()
  me.text(text="after")


--- ./demo/llm_playground.py
import random
import time
from typing import Callable

import mesop as me


@me.stateclass
class State:
  title: str = "LLM Playground"
  # Prompt / Response
  input: str
  response: str
  # Tab open/close
  prompt_tab: bool = True
  response_tab: bool = True
  # Model configs
  selected_model: str = "gemini-1.5"
  selected_region: str = "us-east4"
  temperature: float = 0
  token_limit: int = 1
  stop_sequence: str = ""
  stop_sequences: list[str]
  # Modal
  modal_open: bool = False
  # Workaround for clearing inputs
  clear_prompt_count: int = 0
  clear_sequence_count: int = 0


@me.page(path="/llm_playground", title="LLM Playground")
def page():
  state = me.state(State)

  # Modal
  with modal(modal_open=state.modal_open):
    me.text("Get code", type="headline-5")
    if "gemini" in state.selected_model:
      me.text(
        "Use the following code in your application to request a model response."
      )
      with me.box(style=_STYLE_CODE_BOX):
        me.markdown(
          _GEMINI_CODE_TEXT.format(
            content=state.input.replace('"', '\\"'),
            model=state.selected_model,
            region=state.selected_region,
            stop_sequences=make_stop_sequence_str(state.stop_sequences),
            token_limit=state.token_limit,
            temperature=state.temperature,
          )
        )
    else:
      me.text(
        "You can use the following code to start integrating your current prompt and settings into your application."
      )
      with me.box(style=_STYLE_CODE_BOX):
        me.markdown(
          _GPT_CODE_TEXT.format(
            content=state.input.replace('"', '\\"').replace("\n", "\\n"),
            model=state.selected_model,
            stop_sequences=make_stop_sequence_str(state.stop_sequences),
            token_limit=state.token_limit,
            temperature=state.temperature,
          )
        )
    me.button(label="Close", type="raised", on_click=on_click_modal_bg)

  # Main content
  with me.box(style=_STYLE_CONTAINER):
    # Main Header
    with me.box(style=_STYLE_MAIN_HEADER):
      with me.box(style=_STYLE_TITLE_BOX):
        me.text(
          state.title,
          type="headline-6",
          style=me.Style(line_height="24px", margin=me.Margin(bottom=0)),
        )

    # Toolbar Header
    with me.box(style=_STYLE_CONFIG_HEADER):
      icon_button(
        icon="code", tooltip="Code", label="CODE", on_click=on_click_show_code
      )

    # Main Content
    with me.box(style=_STYLE_MAIN_COLUMN):
      # Prompt Tab
      with tab_box(header="Prompt", key="prompt_tab"):
        me.textarea(
          label="Write your prompt here, insert media and then click Submit",
          # Workaround: update key to clear input.
          key=f"prompt-{state.clear_prompt_count}",
          on_input=on_prompt_input,
          style=_STYLE_INPUT_WIDTH,
        )
        me.button(label="Submit", type="flat", on_click=on_click_submit)
        me.button(label="Clear", on_click=on_click_clear)

      # Response Tab
      with tab_box(header="Response", key="response_tab"):
        if state.response:
          me.markdown(state.response)
        else:
          me.markdown(
            "The model will generate a response after you click Submit."
          )

    # LLM Config
    with me.box(style=_STYLE_CONFIG_COLUMN):
      me.select(
        options=[
          me.SelectOption(label="Gemini 1.5", value="gemini-1.5"),
          me.SelectOption(label="Chat-GPT Turbo", value="gpt-3.5-turbo"),
        ],
        label="Model",
        style=_STYLE_INPUT_WIDTH,
        on_selection_change=on_model_select,
        value=state.selected_model,
      )

      if "gemini" in state.selected_model:
        me.select(
          options=[
            me.SelectOption(label="us-central1 (Iowa)", value="us-central1"),
            me.SelectOption(
              label="us-east4 (North Virginia)", value="us-east4"
            ),
          ],
          label="Region",
          style=_STYLE_INPUT_WIDTH,
          on_selection_change=on_region_select,
          value=state.selected_region,
        )

      me.text("Temperature", style=_STYLE_SLIDER_LABEL)
      with me.box(style=_STYLE_SLIDER_INPUT_BOX):
        with me.box(style=_STYLE_SLIDER_WRAP):
          me.slider(
            min=0, max=2, step=0.1, on_value_change=on_slider_temperature
          )
        me.input(
          style=_STYLE_SLIDER_INPUT, value=str(state.temperature), readonly=True
        )

      me.text("Output Token Limit", style=_STYLE_SLIDER_LABEL)
      with me.box(style=_STYLE_SLIDER_INPUT_BOX):
        with me.box(style=_STYLE_SLIDER_WRAP):
          me.slider(min=1, max=8192, on_value_change=on_slider_token_limit)
        me.input(
          style=_STYLE_SLIDER_INPUT, value=str(state.token_limit), readonly=True
        )

      with me.box(style=_STYLE_STOP_SEQUENCE_BOX):
        with me.box(style=_STYLE_STOP_SEQUENCE_WRAP):
          me.input(
            label="Add stop sequence",
            style=_STYLE_INPUT_WIDTH,
            on_input=on_stop_sequence_input,
            # Workaround: update key to clear input.
            key=f"input-sequence-{state.clear_sequence_count}",
          )
        with me.content_button(
          style=me.Style(margin=me.Margin(left=10)),
          on_click=on_click_add_stop_sequence,
        ):
          with me.tooltip(message="Add stop Sequence"):
            me.icon(icon="add_circle")

      # Stop sequence "chips"
      for index, sequence in enumerate(state.stop_sequences):
        me.button(
          key=f"sequence-{index}",
          label=sequence,
          on_click=on_click_remove_stop_sequence,
          type="raised",
          style=_STYLE_STOP_SEQUENCE_CHIP,
        )


# HELPER COMPONENTS


@me.component
def icon_button(*, icon: str, label: str, tooltip: str, on_click: Callable):
  """Icon button with text and tooltip."""
  with me.content_button(on_click=on_click):
    with me.tooltip(message=tooltip):
      with me.box(style=me.Style(display="flex")):
        me.icon(icon=icon)
        me.text(
          label, style=me.Style(line_height="24px", margin=me.Margin(left=5))
        )


@me.content_component
def tab_box(*, header: str, key: str):
  """Collapsible tab box"""
  state = me.state(State)
  tab_open = getattr(state, key)
  with me.box(style=me.Style(width="100%", margin=me.Margin(bottom=20))):
    # Tab Header
    with me.box(
      key=key,
      on_click=on_click_tab_header,
      style=me.Style(padding=_DEFAULT_PADDING, border=_DEFAULT_BORDER),
    ):
      with me.box(style=me.Style(display="flex")):
        me.icon(
          icon="keyboard_arrow_down" if tab_open else "keyboard_arrow_right"
        )
        me.text(
          header,
          style=me.Style(
            line_height="24px", margin=me.Margin(left=5), font_weight="bold"
          ),
        )
    # Tab Content
    with me.box(
      style=me.Style(
        padding=_DEFAULT_PADDING,
        border=_DEFAULT_BORDER,
        display="block" if tab_open else "none",
      )
    ):
      me.slot()


@me.content_component
def modal(modal_open: bool):
  """Basic modal box."""
  with me.box(
    style=_make_modal_background_style(modal_open), on_click=on_click_modal_bg
  ):
    with me.box(style=_STYLE_MODAL_CONTAINER):
      with me.box(style=_STYLE_MODAL_CONTENT):
        me.slot()


# EVENT HANDLERS


def on_click_clear(e: me.ClickEvent):
  """Click event for clearing prompt text."""
  state = me.state(State)
  state.clear_prompt_count += 1
  state.input = ""
  state.response = ""


def on_prompt_input(e: me.InputEvent):
  """Capture prompt input."""
  state = me.state(State)
  state.input = e.value


def on_model_select(e: me.SelectSelectionChangeEvent):
  """Event to select model."""
  state = me.state(State)
  state.selected_model = e.value


def on_region_select(e: me.SelectSelectionChangeEvent):
  """Event to select GCP region (Gemini models only)."""
  state = me.state(State)
  state.selected_region = e.value


def on_slider_temperature(e: me.SliderValueChangeEvent):
  """Event to adjust temperature slider value."""
  state = me.state(State)
  state.temperature = float(e.value)


def on_slider_token_limit(e: me.SliderValueChangeEvent):
  """Event to adjust token limit slider value."""
  state = me.state(State)
  state.token_limit = int(e.value)


def on_stop_sequence_input(e: me.InputEvent):
  """Capture stop sequence input."""
  state = me.state(State)
  state.stop_sequence = e.value


def on_click_add_stop_sequence(e: me.ClickEvent):
  """Save stop sequence. Will create "chip" for the sequence in the input."""
  state = me.state(State)
  if state.stop_sequence:
    state.stop_sequences.append(state.stop_sequence)
    state.clear_sequence_count += 1


def on_click_remove_stop_sequence(e: me.ClickEvent):
  """Click event that removes the stop sequence that was clicked."""
  state = me.state(State)
  index = int(e.key.replace("sequence-", ""))
  del state.stop_sequences[index]


def on_click_tab_header(e: me.ClickEvent):
  """Open and closes tab content."""
  state = me.state(State)
  setattr(state, e.key, not getattr(state, e.key))


def on_click_show_code(e: me.ClickEvent):
  """Opens modal to show generated code for the given model configuration."""
  state = me.state(State)
  state.modal_open = True


def on_click_modal_bg(e: me.ClickEvent):
  """Allows modal to be closed by clicking on the background."""
  state = me.state(State)
  if state.modal_open:
    state.modal_open = False


def on_click_submit(e: me.ClickEvent):
  """Submits prompt to test model configuration.

  This example returns canned text. A real implementation
  would call APIs against the given configuration.
  """
  state = me.state(State)
  for line in transform(state.input):
    state.response += line
    yield


def transform(input: str):
  """Transform function that returns canned responses."""
  for line in random.sample(LINES, random.randint(3, len(LINES) - 1)):
    time.sleep(0.3)
    yield line + " "


LINES = [
  "Mesop is a Python-based UI framework designed to simplify web UI development for engineers without frontend experience.",
  "It leverages the power of the Angular web framework and Angular Material components, allowing rapid construction of web demos and internal tools.",
  "With Mesop, developers can enjoy a fast build-edit-refresh loop thanks to its hot reload feature, making UI tweaks and component integration seamless.",
  "Deployment is straightforward, utilizing standard HTTP technologies.",
  "Mesop's component library aims for comprehensive Angular Material component coverage, enhancing UI flexibility and composability.",
  "It supports custom components for specific use cases, ensuring developers can extend its capabilities to fit their unique requirements.",
  "Mesop's roadmap includes expanding its component library and simplifying the onboarding processs.",
]


# HELPERS

_GEMINI_CODE_TEXT = """
```python
import base64
import vertexai
from vertexai.generative_models import GenerativeModel, Part, FinishReason
import vertexai.preview.generative_models as generative_models

def generate():
  vertexai.init(project="<YOUR-PROJECT-ID>", location="{region}")
  model = GenerativeModel("{model}")
  responses = model.generate_content(
      [\"\"\"{content}\"\"\"],
      generation_config=generation_config,
      safety_settings=safety_settings,
      stream=True,
  )

  for response in responses:
    print(response.text, end="")


generation_config = {{
    "max_output_tokens": {token_limit},
    "stop_sequences": [{stop_sequences}],
    "temperature": {temperature},
    "top_p": 0.95,
}}

safety_settings = {{
    generative_models.HarmCategory.HARM_CATEGORY_HATE_SPEECH: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    generative_models.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    generative_models.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    generative_models.HarmCategory.HARM_CATEGORY_HARASSMENT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
}}

generate()
```
""".strip()

_GPT_CODE_TEXT = """
```python
from openai import OpenAI
client = OpenAI()

response = client.chat.completions.create(
  model="{model}",
  messages=[
    {{
      "role": "user",
      "content": "{content}"
    }}
  ],
  temperature={temperature},
  max_tokens={token_limit},
  top_p=1,
  frequency_penalty=0,
  presence_penalty=0,
  stop=[{stop_sequences}]
)
```
""".strip()


def make_stop_sequence_str(stop_sequences: list[str]) -> str:
  """Formats stop sequences for code output (list of strings)."""
  return ",".join(map(lambda s: f'"{s}"', stop_sequences))


# STYLES


def _make_modal_background_style(modal_open: bool) -> me.Style:
  """Makes style for modal background.

  Args:
    modal_open: Whether the modal is open.
  """
  return me.Style(
    display="block" if modal_open else "none",
    position="fixed",
    z_index=1000,
    width="100%",
    height="100%",
    overflow_x="auto",
    overflow_y="auto",
    background="rgba(0,0,0,0.4)",
  )


_DEFAULT_PADDING = me.Padding.all(15)
_DEFAULT_BORDER = me.Border.all(
  me.BorderSide(color="#e0e0e0", width=1, style="solid")
)

_STYLE_INPUT_WIDTH = me.Style(width="100%")
_STYLE_SLIDER_INPUT_BOX = me.Style(display="flex", flex_wrap="wrap")
_STYLE_SLIDER_WRAP = me.Style(flex_grow=1)
_STYLE_SLIDER_LABEL = me.Style(padding=me.Padding(bottom=10))
_STYLE_SLIDER_INPUT = me.Style(width=75)

_STYLE_STOP_SEQUENCE_BOX = me.Style(display="flex")
_STYLE_STOP_SEQUENCE_WRAP = me.Style(flex_grow=1)

_STYLE_CONTAINER = me.Style(
  display="grid",
  grid_template_columns="5fr 2fr",
  grid_template_rows="auto 5fr",
  height="100vh",
)

_STYLE_MAIN_HEADER = me.Style(
  border=_DEFAULT_BORDER, padding=me.Padding.all(15)
)

_STYLE_MAIN_COLUMN = me.Style(
  border=_DEFAULT_BORDER,
  padding=me.Padding.all(15),
  overflow_y="scroll",
)

_STYLE_CONFIG_COLUMN = me.Style(
  border=_DEFAULT_BORDER,
  padding=me.Padding.all(15),
  overflow_y="scroll",
)

_STYLE_TITLE_BOX = me.Style(display="inline-block")

_STYLE_CONFIG_HEADER = me.Style(
  border=_DEFAULT_BORDER, padding=me.Padding.all(10)
)

_STYLE_STOP_SEQUENCE_CHIP = me.Style(margin=me.Margin.all(3))

_STYLE_MODAL_CONTAINER = me.Style(
  background="#fff",
  margin=me.Margin.symmetric(vertical="0", horizontal="auto"),
  width="min(1024px, 100%)",
  box_sizing="content-box",
  height="100vh",
  overflow_y="scroll",
  box_shadow=("0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f"),
)

_STYLE_MODAL_CONTENT = me.Style(margin=me.Margin.all(30))

_STYLE_CODE_BOX = me.Style(
  font_size=13,
  margin=me.Margin.symmetric(vertical=10, horizontal=0),
  padding=me.Padding.all(10),
  border=me.Border.all(me.BorderSide(color="#e0e0e0", width=1, style="solid")),
)


--- ./demo/uploader.py
import base64

import mesop as me


@me.stateclass
class State:
  name: str
  size: int
  mime_type: str
  contents: str


@me.page(path="/uploader")
def app():
  state = me.state(State)
  me.uploader(
    label="Upload Image",
    accepted_file_types=["image/jpeg", "image/png"],
    on_upload=handle_upload,
  )

  if state.contents:
    with me.box(style=me.Style(margin=me.Margin.all(10))):
      me.text(f"File name: {state.name}")
      me.text(f"File size: {state.size}")
      me.text(f"File type: {state.mime_type}")

    with me.box(style=me.Style(margin=me.Margin.all(10))):
      me.image(src=state.contents)


def handle_upload(event: me.UploadEvent):
  state = me.state(State)
  state.name = event.file.name
  state.size = event.file.size
  state.mime_type = event.file.mime_type
  state.contents = f"data:{event.file.mime_type};base64,{base64.b64encode(event.file.getvalue()).decode()}"


--- ./demo/code.py
import inspect

import mesop as me


@me.page(path="/code")
def code():
  me.text("Defaults to Python")
  me.code("a = 123")

  me.text("Can set to other languages")
  me.code("<div class='a'>foo</div>", language="html")

  me.text("Bigger code block")
  me.code(inspect.getsource(me))


--- ./demo/markdown_editor.py
from dataclasses import dataclass

import mesop as me


@dataclass(kw_only=True)
class Note:
  """Content of note."""

  content: str = ""


@me.stateclass
class State:
  notes: list[Note]
  selected_note_index: int
  selected_note_content: str
  show_preview: bool = True


@me.page(path="/markdown_editor", title="Markdown Editor")
def page():
  state = me.state(State)

  # On load, add a starter note.
  if not state.notes:
    state.notes.append(Note(content=_INTRO_TEXT))
    state.selected_note_content = state.notes[0].content
    state.selected_note_index = 0

  with me.box(style=_style_container(state.show_preview)):
    # Note list column
    with me.box(style=_STYLE_NOTES_NAV):
      # Toolbar
      with me.box(style=_STYLE_TOOLBAR):
        with me.content_button(on_click=on_click_new):
          with me.tooltip(message="New note"):
            me.icon(icon="add_notes")
        with me.content_button(on_click=on_click_hide):
          with me.tooltip(
            message="Hide preview" if state.show_preview else "Show preview"
          ):
            me.icon(icon="hide_image")

      # Note list
      for index, note in enumerate(state.notes):
        with me.box(
          key=f"note-{index}",
          on_click=on_click_note,
          style=_style_note_row(index == state.selected_note_index),
        ):
          me.text(_render_note_excerpt(note.content))

    # Markdown Editor Column
    with me.box(style=_STYLE_EDITOR):
      me.native_textarea(
        value=state.selected_note_content,
        style=_STYLE_TEXTAREA,
        on_input=on_text_input,
      )

    # Markdown Preview Column
    if state.show_preview:
      with me.box(style=_STYLE_PREVIEW):
        if state.selected_note_index < len(state.notes):
          me.markdown(state.notes[state.selected_note_index].content)


# HELPERS

_EXCERPT_CHAR_LIMIT = 90


def _render_note_excerpt(content: str) -> str:
  if len(content) <= _EXCERPT_CHAR_LIMIT:
    return content
  return content[:_EXCERPT_CHAR_LIMIT] + "..."


_INTRO_TEXT = """
# Mesop Markdown Editor Example

This is example shows how to make a simple markdown editor.
""".strip()


# EVENT HANDLERS


def on_click_new(e: me.ClickEvent):
  state = me.state(State)
  # Need to update the initial value of the editor text area so we can
  # trigger a diff to reset the editor to empty. Need to yield this change.
  # for this to work.
  state.selected_note_content = state.notes[state.selected_note_index].content
  yield
  # Reset the initial value of the editor text area to empty since the new note
  # has no content.
  state.selected_note_content = ""
  state.notes.append(Note())
  state.selected_note_index = len(state.notes) - 1
  yield


def on_click_hide(e: me.ClickEvent):
  """Hides/Shows preview Markdown pane."""
  state = me.state(State)
  state.show_preview = bool(not state.show_preview)


def on_click_note(e: me.ClickEvent):
  """Selects a note from the note list."""
  state = me.state(State)
  note_id = int(e.key.replace("note-", ""))
  note = state.notes[note_id]
  state.selected_note_index = note_id
  state.selected_note_content = note.content


def on_text_input(e: me.InputEvent):
  """Captures text in editor."""
  state = me.state(State)
  state.notes[state.selected_note_index].content = e.value


# STYLES

_BACKGROUND_COLOR = "#fafafa"
_FONT_COLOR = "#555"
_NOTE_ROW_FONT_COLOR = "#777"
_NOTE_ROW_FONT_SIZE = "14px"
_SELECTED_ROW_BACKGROUND_COLOR = "#dee3eb"
_DEFAULT_BORDER_STYLE = me.BorderSide(width=1, style="solid", color="#bbb")


def _style_container(show_preview: bool = True) -> me.Style:
  return me.Style(
    background=_BACKGROUND_COLOR,
    color=_FONT_COLOR,
    display="grid",
    grid_template_columns="2fr 4fr 4fr" if show_preview else "2fr 8fr",
    height="100vh",
  )


def _style_note_row(selected: bool = False) -> me.Style:
  return me.Style(
    color=_NOTE_ROW_FONT_COLOR,
    font_size=_NOTE_ROW_FONT_SIZE,
    background=_SELECTED_ROW_BACKGROUND_COLOR if selected else "none",
    padding=me.Padding.all(10),
    border=me.Border(bottom=_DEFAULT_BORDER_STYLE),
    height="100px",
    overflow_x="hidden",
    overflow_y="hidden",
  )


_STYLE_NOTES_NAV = me.Style(overflow_y="scroll", padding=me.Padding.all(15))


_STYLE_TOOLBAR = me.Style(
  padding=me.Padding.all(5),
  border=me.Border(bottom=_DEFAULT_BORDER_STYLE),
)


_STYLE_EDITOR = me.Style(
  overflow_y="hidden",
  padding=me.Padding(left=20, right=15, top=20, bottom=0),
  border=me.Border(
    left=_DEFAULT_BORDER_STYLE,
    right=_DEFAULT_BORDER_STYLE,
  ),
)


_STYLE_PREVIEW = me.Style(
  overflow_y="scroll", padding=me.Padding.symmetric(vertical=0, horizontal=20)
)


_STYLE_TEXTAREA = me.Style(
  color=_FONT_COLOR,
  background=_BACKGROUND_COLOR,
  outline="none",  # Hides focus border
  border=me.Border.all(me.BorderSide(style="none")),
  width="100%",
  height="100%",
)


--- ./demo/badge.py
import mesop as me


@me.page(path="/badge")
def app():
  with me.box(
    style=me.Style(
      display="block",
      padding=me.Padding(top=16, right=16, bottom=16, left=16),
      height=50,
      width=30,
    )
  ):
    with me.badge(content="1", size="medium"):
      me.text(text="text with badge")


--- ./demo/text_to_text.py
import mesop as me
import mesop.labs as mel


@me.page(path="/text_to_text", title="Text to Text Example")
def app():
  mel.text_io(
    upper_case_stream,
    title="Text to Text Example",
  )


def upper_case_stream(s: str):
  return "Echo: " + s


--- ./demo/tooltip.py
import mesop as me


@me.page(path="/tooltip")
def app():
  with me.tooltip(message="Tooltip message"):
    me.text(text="Hello, World")


--- ./demo/slider.py
import mesop as me


@me.stateclass
class State:
  value: float = 0


def on_value_change(event: me.SliderValueChangeEvent):
  me.state(State).value = event.value


@me.page(path="/slider")
def app():
  me.slider(on_value_change=on_value_change)
  me.text(text=f"Value: {me.state(State).value}")


--- ./demo/button.py
import mesop as me


@me.page(path="/button")
def main():
  me.text("Button types:", style=me.Style(margin=me.Margin(bottom=12)))
  with me.box(style=me.Style(display="flex", flex_direction="row", gap=12)):
    me.button("default")
    me.button("raised", type="raised")
    me.button("flat", type="flat")
    me.button("stroked", type="stroked")

  me.text("Button colors:", style=me.Style(margin=me.Margin(bottom=12)))
  with me.box(style=me.Style(display="flex", flex_direction="row", gap=12)):
    me.button("default", type="flat")
    me.button("primary", color="primary", type="flat")
    me.button("secondary", color="accent", type="flat")
    me.button("warn", color="warn", type="flat")


--- ./demo/chat.py
import random
import time

import mesop as me
import mesop.labs as mel


@me.page(path="/chat", title="Mesop Demo Chat")
def page():
  mel.chat(transform, title="Mesop Demo Chat", bot_user="Mesop Bot")


def transform(input: str, history: list[mel.ChatMessage]):
  for line in random.sample(LINES, random.randint(3, len(LINES) - 1)):
    time.sleep(0.3)
    yield line + " "


LINES = [
  "Mesop is a Python-based UI framework designed to simplify web UI development for engineers without frontend experience.",
  "It leverages the power of the Angular web framework and Angular Material components, allowing rapid construction of web demos and internal tools.",
  "With Mesop, developers can enjoy a fast build-edit-refresh loop thanks to its hot reload feature, making UI tweaks and component integration seamless.",
  "Deployment is straightforward, utilizing standard HTTP technologies.",
  "Mesop's component library aims for comprehensive Angular Material component coverage, enhancing UI flexibility and composability.",
  "It supports custom components for specific use cases, ensuring developers can extend its capabilities to fit their unique requirements.",
  "Mesop's roadmap includes expanding its component library and simplifying the onboarding processs.",
]


--- ./demo/input.py
import mesop as me


@me.stateclass
class State:
  input: str = ""


def on_input(e: me.InputEvent):
  state = me.state(State)
  state.input = e.value


@me.page(path="/input")
def app():
  s = me.state(State)
  me.input(label="Basic input", on_input=on_input)
  me.text(text=s.input)


--- ./demo/text.py
import mesop as me


@me.page(path="/text")
def text():
  me.text(text="headline-1: Hello, world!", type="headline-1")
  me.text(text="headline-2: Hello, world!", type="headline-2")
  me.text(text="headline-3: Hello, world!", type="headline-3")
  me.text(text="headline-4: Hello, world!", type="headline-4")
  me.text(text="headline-5: Hello, world!", type="headline-5")
  me.text(text="headline-6: Hello, world!", type="headline-6")
  me.text(text="subtitle-1: Hello, world!", type="subtitle-1")
  me.text(text="subtitle-2: Hello, world!", type="subtitle-2")
  me.text(text="body-1: Hello, world!", type="body-1")
  me.text(text="body-2: Hello, world!", type="body-2")
  me.text(text="caption: Hello, world!", type="caption")
  me.text(text="button: Hello, world!", type="button")


--- ./demo/radio.py
import mesop as me


@me.stateclass
class State:
  radio_value: str = "2"


def on_change(event: me.RadioChangeEvent):
  s = me.state(State)
  s.radio_value = event.value


@me.page(path="/radio")
def app():
  s = me.state(State)
  me.text("Horizontal radio options")
  me.radio(
    on_change=on_change,
    options=[
      me.RadioOption(label="Option 1", value="1"),
      me.RadioOption(label="Option 2", value="2"),
    ],
    value=s.radio_value,
  )
  me.text(text="Selected radio value: " + s.radio_value)


--- ./demo/audio.py
import mesop as me


@me.page(path="/audio")
def app():
  me.audio(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3",
  )


--- ./demo/table.py
from datetime import datetime

import numpy as np
import pandas as pd

import mesop as me


@me.stateclass
class State:
  selected_cell: str = "No cell selected."


df = pd.DataFrame(
  data={
    "NA": [pd.NA, pd.NA, pd.NA],
    "Index": [3, 2, 1],
    "Bools": [True, False, np.bool_(True)],
    "Ints": [101, 90, np.int64(-55)],
    "Floats": [2.3, 4.5, np.float64(-3.000000003)],
    "Strings": ["Hello", "World", "!"],
    "Date Times": [
      pd.Timestamp("20180310"),
      pd.Timestamp("20230310"),
      datetime(2023, 1, 1, 12, 12, 1),
    ],
  }
)


@me.page(path="/table")
def app():
  state = me.state(State)

  with me.box(style=me.Style(padding=me.Padding.all(10), width=500)):
    me.table(
      df,
      on_click=on_click,
      header=me.TableHeader(sticky=True),
      columns={
        "NA": me.TableColumn(sticky=True),
        "Index": me.TableColumn(sticky=True),
      },
    )

  with me.box(
    style=me.Style(
      background="#ececec",
      margin=me.Margin.all(10),
      padding=me.Padding.all(10),
    )
  ):
    me.text(state.selected_cell)


def on_click(e: me.TableClickEvent):
  state = me.state(State)
  state.selected_cell = (
    f"Selected cell at col {e.col_index} and row {e.row_index} "
    f"with value {str(df.iat[e.row_index, e.col_index])}"
  )


--- ./demo/progress_bar.py
import mesop as me


@me.page(path="/progress_bar")
def app():
  me.text("Default progress bar")
  me.progress_bar()


--- ./demo/llm_rewriter.py
import random
import time
from dataclasses import dataclass
from typing import Literal

import mesop as me

Role = Literal["user", "assistant"]


@dataclass(kw_only=True)
class ChatMessage:
  """Chat message metadata."""

  role: Role = "user"
  content: str = ""
  edited: bool = False


@me.stateclass
class State:
  input: str
  output: list[ChatMessage]
  in_progress: bool
  rewrite: str
  rewrite_message_index: int
  preview_rewrite: str
  preview_original: str
  modal_open: bool


@me.page(path="/llm_rewriter", title="LLM Rewriter")
def page():
  state = me.state(State)

  # Modal
  with me.box(style=_make_modal_background_style(state.modal_open)):
    with me.box(style=_STYLE_MODAL_CONTAINER):
      with me.box(style=_STYLE_MODAL_CONTENT):
        me.textarea(
          label="Rewrite",
          style=_STYLE_INPUT_WIDTH,
          value=state.rewrite,
          on_input=on_rewrite_input,
        )
        with me.box():
          me.button(
            "Submit Rewrite",
            color="primary",
            type="flat",
            on_click=on_click_submit_rewrite,
          )
          me.button(
            "Cancel",
            on_click=on_click_cancel_rewrite,
          )
        with me.box(style=_STYLE_PREVIEW_CONTAINER):
          with me.box(style=_STYLE_PREVIEW_ORIGINAL):
            me.text("Original Message", type="headline-6")
            me.markdown(state.preview_original)

          with me.box(style=_STYLE_PREVIEW_REWRITE):
            me.text("Preview Rewrite", type="headline-6")
            me.markdown(state.preview_rewrite)

  # Chat UI
  with me.box(style=_STYLE_APP_CONTAINER):
    with me.box(style=_make_style_chat_ui_container(bool(_TITLE))):
      me.text(_TITLE, type="headline-5", style=_STYLE_TITLE)
      with me.box(style=_STYLE_CHAT_BOX):
        for index, msg in enumerate(state.output):
          with me.box(
            style=_make_style_chat_bubble_wrapper(msg.role),
            key=f"msg-{index}",
            on_click=on_click_rewrite_msg,
          ):
            if msg.role == _ROLE_ASSISTANT:
              me.text(
                _display_username(_BOT_USER_DEFAULT, msg.edited),
                style=_STYLE_CHAT_BUBBLE_NAME,
              )
            with me.box(style=_make_chat_bubble_style(msg.role, msg.edited)):
              if msg.role == _ROLE_USER:
                me.text(msg.content, style=_STYLE_CHAT_BUBBLE_PLAINTEXT)
              else:
                me.markdown(msg.content)
                with me.tooltip(message="Rewrite response"):
                  me.icon(icon="edit_note")

      with me.box(style=_STYLE_CHAT_INPUT_BOX):
        me.input(
          label=_LABEL_INPUT,
          # Workaround: update key to clear input.
          key=f"input-{len(state.output)}",
          on_input=on_chat_input,
          style=_STYLE_CHAT_INPUT,
        )
        with me.box():
          me.button(
            _LABEL_BUTTON_IN_PROGRESS if state.in_progress else _LABEL_BUTTON,
            color="primary",
            type="flat",
            disabled=state.in_progress,
            on_click=on_click_submit_chat_msg,
          )


# Event Handlers


def on_chat_input(e: me.InputEvent):
  """Capture chat text input."""
  state = me.state(State)
  state.input = e.value


def on_rewrite_input(e: me.InputEvent):
  """Capture rewrite text input."""
  state = me.state(State)
  state.preview_rewrite = e.value


def on_click_rewrite_msg(e: me.ClickEvent):
  """Shows rewrite modal when a message is clicked.

  Edit this function to persist rewritten messages.
  """
  state = me.state(State)
  index = int(e.key.replace("msg-", ""))
  message = state.output[index]
  if message.role == _ROLE_USER or state.in_progress:
    return
  state.modal_open = True
  state.rewrite = message.content
  state.rewrite_message_index = index
  state.preview_original = message.content
  state.preview_rewrite = message.content


def on_click_submit_rewrite(e: me.ClickEvent):
  """Submits rewrite message."""
  state = me.state(State)
  state.modal_open = False
  message = state.output[state.rewrite_message_index]
  if message.content != state.preview_rewrite:
    message.content = state.preview_rewrite
    message.edited = True
  state.rewrite_message_index = 0
  state.rewrite = ""
  state.preview_original = ""
  state.preview_rewrite = ""


def on_click_cancel_rewrite(e: me.ClickEvent):
  """Hides rewrite modal."""
  state = me.state(State)
  state.modal_open = False
  state.rewrite_message_index = 0
  state.rewrite = ""
  state.preview_original = ""
  state.preview_rewrite = ""


def on_click_submit_chat_msg(e: me.ClickEvent):
  """Handles submitting a chat message."""
  state = me.state(State)
  if state.in_progress or not state.input:
    return
  input = state.input
  state.input = ""
  yield

  output = state.output
  if output is None:
    output = []
  output.append(ChatMessage(role=_ROLE_USER, content=input))
  state.in_progress = True
  yield

  start_time = time.time()
  output_message = respond_to_chat(input, state.output)
  assistant_message = ChatMessage(role=_ROLE_ASSISTANT)
  output.append(assistant_message)
  state.output = output
  for content in output_message:
    assistant_message.content += content
    # TODO: 0.25 is an abitrary choice. In the future, consider making this adjustable.
    if (time.time() - start_time) >= 0.25:
      start_time = time.time()
      yield
  state.in_progress = False
  yield


# Transform function for processing chat messages.


def respond_to_chat(input: str, history: list[ChatMessage]):
  """Displays random canned text.

  Edit this function to process messages with a real chatbot/LLM.
  """
  lines = [
    (
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, "
      "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
    ),
    "Laoreet sit amet cursus sit amet dictum sit amet.",
    "At lectus urna duis convallis.",
    "A pellentesque sit amet porttitor eget.",
    "Mauris nunc congue nisi vitae suscipit tellus mauris a diam.",
    "Aliquet lectus proin nibh nisl condimentum id.",
    "Integer malesuada nunc vel risus commodo viverra maecenas accumsan.",
    "Tempor id eu nisl nunc mi.",
    "Id consectetur purus ut faucibus pulvinar.",
    "Mauris pharetra et ultrices neque ornare.",
    "Facilisis magna etiam tempor orci.",
    "Mauris pharetra et ultrices neque.",
    "Sit amet facilisis magna etiam tempor orci.",
    "Amet consectetur adipiscing elit pellentesque habitant morbi tristique.",
    "Egestas erat imperdiet sed euismod.",
    "Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida.",
    "Habitant morbi tristique senectus et netus et malesuada.",
  ]
  for line in random.sample(lines, random.randint(3, len(lines) - 1)):
    yield line + " "


# Constants

_TITLE = "LLM Rewriter"

_ROLE_USER = "user"
_ROLE_ASSISTANT = "assistant"

_BOT_USER_DEFAULT = "mesop-bot"


# Styles

_COLOR_BACKGROUND = "#f0f4f8"
_COLOR_CHAT_BUBBLE_YOU = "#f2f2f2"
_COLOR_CHAT_BUBBLE_BOT = "#ebf3ff"
_COLOR_CHAT_BUUBBLE_EDITED = "#f2ebff"

_DEFAULT_PADDING = me.Padding(top=20, left=20, right=20, bottom=20)
_DEFAULT_BORDER_SIDE = me.BorderSide(
  width="1px", style="solid", color="#ececec"
)

_LABEL_BUTTON = "Send prompt"
_LABEL_BUTTON_IN_PROGRESS = "Processing prompt..."
_LABEL_INPUT = "Enter your prompt"

_STYLE_INPUT_WIDTH = me.Style(width="100%")

_STYLE_APP_CONTAINER = me.Style(
  background=_COLOR_BACKGROUND,
  display="grid",
  height="100vh",
  grid_template_columns="repeat(1, 1fr)",
)
_STYLE_TITLE = me.Style(padding=me.Padding(left=10))
_STYLE_CHAT_BOX = me.Style(
  height="100%",
  overflow_y="scroll",
  padding=_DEFAULT_PADDING,
  margin=me.Margin(bottom=20),
  border_radius="10px",
  border=me.Border(
    left=_DEFAULT_BORDER_SIDE,
    right=_DEFAULT_BORDER_SIDE,
    top=_DEFAULT_BORDER_SIDE,
    bottom=_DEFAULT_BORDER_SIDE,
  ),
)
_STYLE_CHAT_INPUT = me.Style(width="100%")
_STYLE_CHAT_INPUT_BOX = me.Style(padding=me.Padding(top=30))
_STYLE_CHAT_BUBBLE_NAME = me.Style(
  font_weight="bold",
  font_size="12px",
  padding=me.Padding(left=15, right=15, bottom=5),
)
_STYLE_CHAT_BUBBLE_PLAINTEXT = me.Style(margin=me.Margin(top=15, bottom=15))

_STYLE_MODAL_CONTAINER = me.Style(
  background="#fff",
  margin=me.Margin.symmetric(vertical="0", horizontal="auto"),
  width="min(1024px, 100%)",
  box_sizing="content-box",
  height="100vh",
  overflow_y="scroll",
  box_shadow=("0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f"),
)

_STYLE_MODAL_CONTENT = me.Style(margin=me.Margin.all(20))

_STYLE_PREVIEW_CONTAINER = me.Style(
  display="grid",
  grid_template_columns="repeat(2, 1fr)",
)

_STYLE_PREVIEW_ORIGINAL = me.Style(color="#777", padding=_DEFAULT_PADDING)

_STYLE_PREVIEW_REWRITE = me.Style(
  background=_COLOR_CHAT_BUUBBLE_EDITED, padding=_DEFAULT_PADDING
)


def _make_style_chat_ui_container(has_title: bool) -> me.Style:
  """Generates styles for chat UI container depending on if there is a title or not.

  Args:
    has_title: Whether the Chat UI is display a title or not.
  """
  return me.Style(
    display="grid",
    grid_template_columns="repeat(1, 1fr)",
    grid_template_rows="1fr 14fr 1fr" if has_title else "5fr 1fr",
    margin=me.Margin(top=0, bottom=0, left="auto", right="auto"),
    width="min(1024px, 100%)",
    height="100vh",
    background="#fff",
    box_shadow=(
      "0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f"
    ),
    padding=_DEFAULT_PADDING,
  )


def _make_style_chat_bubble_wrapper(role: Role) -> me.Style:
  """Generates styles for chat bubble position.

  Args:
    role: Chat bubble alignment depends on the role
  """
  align_items = "end" if role == _ROLE_USER else "start"
  return me.Style(
    display="flex",
    flex_direction="column",
    align_items=align_items,
  )


def _make_chat_bubble_style(role: Role, edited: bool) -> me.Style:
  """Generates styles for chat bubble.

  Args:
    role: Chat bubble background color depends on the role
    edited: Whether chat message was edited or not.
  """
  background = _COLOR_CHAT_BUBBLE_YOU
  if role == _ROLE_ASSISTANT:
    background = _COLOR_CHAT_BUBBLE_BOT
  if edited:
    background = _COLOR_CHAT_BUUBBLE_EDITED

  return me.Style(
    width="80%",
    font_size="13px",
    background=background,
    border_radius="15px",
    padding=me.Padding(right=15, left=15, bottom=3),
    margin=me.Margin(bottom=10),
    border=me.Border(
      left=_DEFAULT_BORDER_SIDE,
      right=_DEFAULT_BORDER_SIDE,
      top=_DEFAULT_BORDER_SIDE,
      bottom=_DEFAULT_BORDER_SIDE,
    ),
  )


def _make_modal_background_style(modal_open: bool) -> me.Style:
  """Makes style for modal background.

  Args:
    modal_open: Whether the modal is open.
  """
  return me.Style(
    display="block" if modal_open else "none",
    position="fixed",
    z_index=1000,
    width="100%",
    height="100%",
    overflow_x="auto",
    overflow_y="auto",
    background="rgba(0,0,0,0.4)",
  )


def _display_username(username: str, edited: bool = False) -> str:
  """Displays the username

  Args:
    username: Name of the user
    edited: Whether the message has been edited.
  """
  edited_text = " (edited)" if edited else ""
  return username + edited_text


--- ./demo/markdown_demo.py
import mesop as me

SAMPLE_MARKDOWN = """
# Sample Markdown Document

## Table of Contents
1. [Headers](#headers)
2. [Emphasis](#emphasis)
3. [Lists](#lists)
4. [Links](#links)
5. [Code](#code)
6. [Blockquotes](#blockquotes)
7. [Tables](#tables)
8. [Horizontal Rules](#horizontal-rules)

## Headers
# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6

## Emphasis
*Italic text* or _Italic text_
**Bold text** or __Bold text__
***Bold and Italic*** or ___Bold and Italic___

## Lists

### Unordered List
- Item 1
- Item 2
  - Subitem 2.1
  - Subitem 2.2

### Ordered List
1. First item
2. Second item
   1. Subitem 2.1
   2. Subitem 2.2

## Links
[Google](https://www.google.com/)

## Code
Inline `code`
"""


@me.page(path="/markdown_demo")
def app():
  me.markdown(SAMPLE_MARKDOWN)


--- ./demo/select.py
import mesop as me


@me.stateclass
class State:
  selected_value: str = ""


def on_selection_change(e: me.SelectSelectionChangeEvent):
  s = me.state(State)
  s.selected_value = e.value


@me.page(path="/select")
def app():
  me.text(text="Select")
  me.select(
    label="Select",
    options=[
      me.SelectOption(label="label 1", value="value1"),
      me.SelectOption(label="label 2", value="value2"),
      me.SelectOption(label="label 3", value="value3"),
    ],
    on_selection_change=on_selection_change,
    style=me.Style(width=500),
  )
  s = me.state(State)
  me.text(text="Selected value: " + s.selected_value)


--- ./demo/main.py
# Disable import sort ordering due to the hack needed
# to ensure local imports.
# ruff: noqa: E402

import inspect
import os
import sys
from dataclasses import dataclass

import mesop as me

# Append the current directory to sys.path to ensure local imports work
# This is required so mesop/examples/__init__.py can import the modules
# imported below.
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
  sys.path.append(current_dir)


import code as code
import select as select

import audio as audio
import badge as badge
import box as box
import button as button
import chat as chat
import checkbox as checkbox
import divider as divider
import embed as embed
import icon as icon
import image as image
import input as input
import llm_playground as llm_playground
import llm_rewriter as llm_rewriter
import markdown_demo as markdown_demo  # cannot call it markdown due to python library naming conflict
import markdown_editor as markdown_editor
import plot as plot
import progress_bar as progress_bar
import progress_spinner as progress_spinner
import radio as radio
import sidenav as sidenav
import slide_toggle as slide_toggle
import slider as slider
import table as table
import text as text
import text_to_image as text_to_image
import text_to_text as text_to_text
import textarea as textarea
import tooltip as tooltip
import uploader as uploader
import video as video


@dataclass
class Example:
  # module_name (should also be the path name)
  name: str


@dataclass
class Section:
  name: str
  examples: list[Example]


FIRST_SECTIONS = [
  Section(
    name="Quick start",
    examples=[
      Example(name="chat"),
      Example(name="text_to_image"),
      Example(name="text_to_text"),
    ],
  ),
  Section(
    name="Use cases",
    examples=[
      Example(name="llm_rewriter"),
      Example(name="llm_playground"),
      Example(name="markdown_editor"),
    ],
  ),
]

COMPONENTS_SECTIONS = [
  Section(
    name="Layout",
    examples=[
      Example(name="box"),
      Example(name="sidenav"),
    ],
  ),
  Section(
    name="Text",
    examples=[
      Example(name="text"),
      Example(name="markdown_demo"),
      Example(name="code"),
    ],
  ),
  Section(
    name="Media",
    examples=[
      Example(name="image"),
      Example(name="audio"),
      Example(name="video"),
    ],
  ),
  Section(
    name="Form",
    examples=[
      Example(name="button"),
      Example(name="checkbox"),
      Example(name="input"),
      Example(name="textarea"),
      Example(name="radio"),
      Example(name="select"),
      Example(name="slide_toggle"),
      Example(name="slider"),
      Example(name="uploader"),
    ],
  ),
  Section(
    name="Visual",
    examples=[
      Example(name="badge"),
      Example(name="divider"),
      Example(name="icon"),
      Example(name="progress_bar"),
      Example(name="progress_spinner"),
      Example(name="table"),
      Example(name="tooltip"),
    ],
  ),
  Section(
    name="Advanced",
    examples=[
      Example(name="embed"),
      Example(name="plot"),
    ],
  ),
]

BORDER_SIDE = me.BorderSide(
  style="solid",
  width=1,
  color="#dcdcdc",
)


@me.stateclass
class State:
  current_demo: str


def create_main_fn(example: Example):
  @me.page(
    title="Mesop Demos",
    path="/" if example.name == "chat" else "/embed/" + example.name,
  )
  def main():
    with me.box(
      style=me.Style(
        height="100%",
        display="flex",
        flex_direction="column",
        background="#fff",
      )
    ):
      header(demo_name=example.name)
      body(example.name)

  return main


for section in FIRST_SECTIONS + COMPONENTS_SECTIONS:
  for example in section.examples:
    create_main_fn(example)


def body(current_demo: str):
  with me.box(
    style=me.Style(
      flex_grow=1,
      display="flex",
    )
  ):
    side_menu()
    src = "/" + current_demo
    with me.box(
      style=me.Style(
        width="calc(100% - 160px)",
        display="grid",
        grid_template_columns="1fr 1fr",
      )
    ):
      demo_ui(src)
      demo_code(inspect.getsource(get_module(current_demo)))


def demo_ui(src: str):
  with me.box(
    style=me.Style(flex_grow=1),
  ):
    box_header("Preview")
    me.embed(
      src=src,
      style=me.Style(
        border=me.Border.all(me.BorderSide(width=0)),
        border_radius=2,
        height="calc(100vh - 120px)",
        width="100%",
      ),
    )


def box_header(header_text: str):
  me.text(
    header_text,
    style=me.Style(
      font_weight=500,
      padding=me.Padding.all(8),
      border=me.Border(
        bottom=BORDER_SIDE,
        right=BORDER_SIDE,
      ),
    ),
  )


def demo_code(code_arg: str):
  with me.box(
    style=me.Style(
      flex_grow=1,
      overflow_x="hidden",
      overflow_y="hidden",
      border=me.Border(
        left=BORDER_SIDE,
      ),
    )
  ):
    box_header("Code")
    # Use four backticks for code fence to avoid conflicts with backticks being used
    # within the displayed code.
    me.markdown(
      f"""````
{code_arg}
````
              """,
      style=me.Style(
        border=me.Border(
          right=BORDER_SIDE,
        ),
        font_size=13,
        padding=me.Padding.all(12),
        height="calc(100vh - 120px)",
        overflow_y="auto",
        width="100%",
      ),
    )


def header(demo_name: str):
  with me.box(
    style=me.Style(
      border=me.Border(
        bottom=me.BorderSide(
          style="solid",
          width=1,
          color="#dcdcdc",
        )
      ),
    )
  ):
    with me.box(
      style=me.Style(
        display="flex",
        align_items="end",
        justify_content="space-between",
        margin=me.Margin.all(12),
        font_size=24,
      )
    ):
      with me.box(style=me.Style(display="flex")):
        me.text(
          "Mesop", style=me.Style(font_weight=700, margin=me.Margin(right=8))
        )
        me.text("Demos — " + format_example_name(demo_name))
      me.text(
        "v" + me.__version__,
        style=me.Style(font_size=18, margin=me.Margin(left=8)),
      )


def side_menu():
  with me.box(
    style=me.Style(
      padding=me.Padding.all(12),
      width=150,
      flex_grow=0,
      line_height="1.5",
      border=me.Border(right=BORDER_SIDE),
      overflow_x="hidden",
      height="calc(100vh - 60px)",
      overflow_y="auto",
    )
  ):
    for section in FIRST_SECTIONS:
      nav_section(section)
    with me.box(
      style=me.Style(
        margin=me.Margin.symmetric(
          horizontal=-16,
          vertical=16,
        ),
      )
    ):
      me.divider()
    me.text(
      "Components",
      style=me.Style(
        letter_spacing="0.5px",
        margin=me.Margin(bottom=6),
      ),
    )
    for section in COMPONENTS_SECTIONS:
      nav_section(section)


def nav_section(section: Section):
  with me.box(style=me.Style(margin=me.Margin(bottom=12))):
    me.text(section.name, style=me.Style(font_weight=700))
    for example in section.examples:
      example_name = format_example_name(example.name)
      path = f"/embed/{example.name}" if example.name != "chat" else "/"
      with me.box(
        style=me.Style(color="#0B57D0", cursor="pointer"),
        on_click=set_demo,
        key=path,
      ):
        me.text(example_name)


def set_demo(e: me.ClickEvent):
  me.navigate(e.key)


def format_example_name(name: str):
  return (
    (" ".join(name.split("_")))
    .capitalize()
    .replace("Llm", "LLM")
    .replace(" demo", "")
  )


def get_module(module_name: str):
  if module_name in globals():
    return globals()[module_name]
  raise me.MesopDeveloperException(f"Module {module_name} not supported")


--- ./demo/slide_toggle.py
import mesop as me


@me.stateclass
class State:
  toggled: bool = False


def on_change(event: me.SlideToggleChangeEvent):
  s = me.state(State)
  s.toggled = not s.toggled


@me.page(path="/slide_toggle")
def app():
  me.slide_toggle(label="Slide toggle", on_change=on_change)
  s = me.state(State)
  me.text(text=f"Toggled: {s.toggled}")


--- ./demo/video.py
import mesop as me


@me.page(path="/video")
def app():
  me.video(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm",
    style=me.Style(height=300, width=300),
  )


--- ./demo/image.py
import mesop as me


@me.page(path="/image")
def app():
  me.image(
    src="https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg",
    alt="Grapefruit",
    style=me.Style(width="100%"),
  )


--- ./demo/checkbox.py
import mesop as me


@me.stateclass
class State:
  checked: bool


def on_update(event: me.CheckboxChangeEvent):
  state = me.state(State)
  state.checked = event.checked


@me.page(path="/checkbox")
def app():
  state = me.state(State)
  me.checkbox(
    "Simple checkbox",
    on_change=on_update,
  )

  if state.checked:
    me.text(text="is checked")
  else:
    me.text(text="is not checked")
