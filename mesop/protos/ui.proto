syntax = "proto3";

package mesop;

// Sent from web client to Python server.
message UiRequest {
    // Current path of UI client (browser).
    string path = 3;
    oneof type {
        InitRequest init = 1;
        UserEvent user_event = 2;
        EditorEvent editor_event = 4;
    }
}

message InitRequest {

}

message UserEvent {
    States states = 1;

    // Used to determine which action handler to call.
    string handler_id = 2;

    Key key = 3;

    oneof type {
        bool bool_value = 4;
        string string_value = 5;
        double double_value = 7;
        int32 int_value = 8;
        NavigationEvent navigation = 6;
    }
}

message EditorEvent {
    oneof type {
        EditorUpdateCallsite update_callsite = 1;
    }
}

message EditorUpdateCallsite {
    SourceCodeLocation source_code_location = 1;
    string keyword_argument = 2; // TODO: handle positional arguments
    string new_code = 3;
}

// This is a user-triggered navigation (e.g. go back/forwards) or a hot reload event.
message NavigationEvent{}

// Sent from Python server to web client.
// Multiple UiResponse messages may be sent in response to 1 UiRequest.
message UiResponse {
    oneof type {
        RenderEvent render = 1;
        ServerError error = 2;
    }
}

message ServerError {
    string exception = 1;
    Traceback traceback = 2;
}

message Traceback {
    repeated StackFrame frames = 1;
}

message StackFrame {
    // e.g. "mesop/mesop/cli/execute_module.py"
    string filename = 1;
    string code_name = 2;
    int32 line_number = 3;

    repeated ContextLine lines = 4;

    // If this originates from application code, the developer wrote, we should highlight it.
    bool is_app_code = 5;
}

message ContextLine {
    string code = 1;
    bool is_caller = 2;
}

message RenderEvent {
    Component root_component = 1;
    States states = 2;
    repeated Command commands = 3;

    // Only sent in editor mode:
    repeated ComponentConfig component_configs = 4;
}

message Command {
    oneof command {
        NavigateCommand navigate = 1;
    }
}

message NavigateCommand {
    // absolute route path, e.g. "/foo/bar"
    string url = 1;
}

message States {
    repeated State states = 1;
}

// Serialized state of application. Sent from Python server to web client.
// Web client doesn't parse this data, it just sends it back to the server.
message State {
    string data = 1;
}

// Represents an instance of a component.
message Component {
    Key key = 3;
    // Type-specific component properties.
    Type type = 1;
    repeated Component children = 2;

    // Only sent in editor mode.
    SourceCodeLocation source_code_location = 4;
}

message SourceCodeLocation {
    string  module = 1;
    int32 line = 2;
    int32 col = 3;
}

message Key {
    string key = 1;
}

message Type {
    string name = 4;
    bytes value = 5;
    string debug_json = 6;
    // Needed outside of |value| because ComponentRenderer (TS) needs to know
    // the type index in order to do content projection correctly.
    int32 type_index = 7;
}

message ComponentConfig {
    string component_name = 1;
    string category = 2;
    repeated EditorField fields = 3;
}


message EditorField {
    string name = 1;
    FieldType type = 2;
}

message FieldType {
    oneof type {
        BoolType bool_type = 1;
        IntType int_type = 2;
        FloatType float_type = 3;
        StringType string_type = 4;
        StringLiteralType string_literal_type = 5;
        ListType list_type = 6;
        StructType struct_type = 7;
    }
}

message BoolType {
    bool default_value = 1;
}

message StructType {
    repeated EditorField fields =1;
}

message IntType {
    int32 default_value = 1;
}

message FloatType {
    double default_value = 1;
}

message StringType {
    string default_value = 1;
}

message StringLiteralType {
    repeated string literals = 1; // note: defaults to first element
}

message ListType {
    FieldType type = 1;
}
