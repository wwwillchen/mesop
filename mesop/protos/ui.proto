syntax = "proto2";

package mesop;

// Sent from web client to Python server.
message UiRequest {
    // Current path of UI client (browser).
    optional string path = 3;
    oneof type {
        InitRequest init = 1;
        UserEvent user_event = 2;
        EditorEvent editor_event = 4;
    }
}

message InitRequest {

}

message UserEvent {
    optional States states = 1;

    // Used to determine which action handler to call.
    optional string handler_id = 2;

    optional Key key = 3;

    oneof type {
        bool bool_value = 4;
        string string_value = 5;
        double double_value = 7;
        int32 int_value = 8;
        NavigationEvent navigation = 6;
    }
}

message EditorEvent {
    oneof type {
        EditorNewComponent new_component = 2;
        EditorUpdateCallsite update_callsite = 1;
        EditorDeleteComponent delete_component = 3;
    }
}

message EditorNewComponent {
    enum Mode {
        // Do not use.
        MODE_UNSPECIFIED = 0;
        // Appends a sibling after the source code location.
        MODE_APPEND_SIBLING = 1;
        // Only works for components that allow children.
        MODE_CHILD = 2;
    }
    optional Mode mode = 3;
    optional SourceCodeLocation source_code_location = 1;
    optional ComponentName component_name = 2;
}

message EditorUpdateCallsite {
    // |source_code_location|, |component_name|, |arg_path| specify
    // which part of the code should be edited.
    optional SourceCodeLocation source_code_location = 1;
    optional ComponentName component_name = 2;
    optional ArgPath arg_path = 3;

    // Specifies what the targeted code should be replaced with.
    optional CodeReplacement replacement = 4;
}

message EditorDeleteComponent {
    optional SourceCodeLocation source_code_location = 1;
}

message CodeReplacement {
    oneof command {
        CodeValue new_code = 1;
        DeleteCode delete_code = 2;
        // Append element to a list.
        // The last segment of the corresponding arg path should be a list index.
        CodeValue append_element = 3;
    }
}

message DeleteCode {}

message CodeValue {
    oneof value {
        string string_value = 1;
        bool bool_value = 2;
        int32 int_value = 3;
        double double_value = 4;
        string struct_name = 5;
    }
}

message ArgPath {
    repeated ArgPathSegment segments = 1;
}

message ArgPathSegment {
    oneof type {
        string keyword_argument = 1;
        int32 list_index = 2;
    }
}

// This is a user-triggered navigation (e.g. go back/forwards) or a hot reload event.
message NavigationEvent{}

// Sent from Python server to web client.
// Multiple UiResponse messages may be sent in response to 1 UiRequest.
message UiResponse {
    oneof type {
        RenderEvent render = 1;
        ServerError error = 2;
    }
}

message ServerError {
    optional string exception = 1;
    optional Traceback traceback = 2;
}

message Traceback {
    repeated StackFrame frames = 1;
}

message StackFrame {
    // e.g. "mesop/mesop/cli/execute_module.py"
    optional string filename = 1;
    optional string code_name = 2;
    optional int32 line_number = 3;

    repeated ContextLine lines = 4;

    // If this originates from application code, the developer wrote, we should highlight it.
    optional bool is_app_code = 5;
}

message ContextLine {
    optional string code = 1;
    optional bool is_caller = 2;
}

message RenderEvent {
    optional Component root_component = 1;
    optional string title = 5;
    optional States states = 2;
    repeated Command commands = 3;

    // Only sent in editor mode:
    repeated ComponentConfig component_configs = 4;
}

message Command {
    oneof command {
        NavigateCommand navigate = 1;
    }
}

message NavigateCommand {
    // absolute route path, e.g. "/foo/bar"
    optional string url = 1;
}

message States {
    repeated State states = 1;
}

// Serialized state of application. Sent from Python server to web client.
// Web client doesn't parse this data, it just sends it back to the server.
message State {
    optional string data = 1;
}

// Represents an instance of a component.
message Component {
    optional Key key = 3;
    optional Style style = 5;
    // Sent down only in debug mode; used for editor mode.
    optional string style_debug_json = 6;

    // Type-specific component properties.
    optional Type type = 1;
    repeated Component children = 2;

    // Only sent in editor mode.
    optional SourceCodeLocation source_code_location = 4;
}

message SourceCodeLocation {
    optional string  module = 1;
    optional int32 line = 2;
    optional int32 col = 3;
}

message Key {
    optional string key = 1;
}

message Type {
    optional ComponentName name = 4;
    optional bytes value = 5;
    optional string debug_json = 6;
    // Needed outside of |value| because ComponentRenderer (TS) needs to know
    // the type index in order to do content projection correctly.
    optional int32 type_index = 7;
}

// Represents user-defined components.
// This is useful for editor/devtools support.
message UserDefinedType {
    message Arg {
        optional string arg_name = 1;
        optional CodeValue code_value = 2;
    }
    repeated Arg args = 1;
}

// Next id: 49
message Style {
    optional string align_content = 32;
    optional string align_items = 1;
    optional string background = 2;
    optional Border border = 3;
    optional string border_radius = 28;
    optional string box_shadow = 29;
    optional string box_sizing = 47;
    optional string color = 4;
    optional string column_gap = 33;
    optional string columns = 5;
    optional string cursor = 46;
    optional string display = 6;
    optional string flex_basis = 7;
    optional string flex_direction = 8;
    optional int32 flex_grow = 9;
    optional string flex_shrink = 10;
    optional string flex_wrap = 11;
    optional string font_family = 45;
    optional string font_size = 12;
    optional string font_style = 13;
    optional string font_weight = 14;
    optional string gap = 30;
    optional string grid_area = 34;
    optional int32 grid_column_start = 35;
    optional int32 grid_column_end = 36;
    optional int32 grid_row_start = 37;
    optional int32 grid_row_end = 38;
    repeated string grid_template_areas = 39;
    optional string grid_template_columns = 40;
    optional string grid_template_rows = 41;
    optional string height = 15;
    optional string justify_content = 16;
    optional string justify_items = 42;
    optional string letter_spacing = 17;
    optional string line_height = 31;
    optional EdgeInsets margin = 18;
    optional string outline = 44;
    optional string overflow_x = 19;
    optional string overflow_y = 20;
    optional EdgeInsets padding = 21;
    optional string position = 22;
    optional string row_gap = 43;
    optional string text_align = 23;
    optional string text_decoration = 24;
    optional string text_overflow = 25;
    optional string white_space = 26;
    optional string width = 27;
    optional int32 z_index = 48;
}

message EdgeInsets {
    optional string top = 1;
    optional string bottom = 2;
    optional string left = 3;
    optional string right = 4;
}

message Border {
    optional BorderSide top = 1;
    optional BorderSide bottom = 2;
    optional BorderSide left = 3;
    optional BorderSide right = 4;
}

message BorderSide {
    optional string width = 1;
    optional string color = 2;
    optional string style = 3;
}

message ComponentConfig {
    optional ComponentName component_name = 1;
    optional string category = 2;
    repeated EditorField fields = 3;
    optional bool accepts_child = 4;
}

message ComponentName {
    oneof module_id {
        // Python module path, e.g. "mesop.labs.layout"
        string module_path = 1;
        // If the component belongs to Mesop
        // (e.g. used with `import mesop as me`), then set to true.
        bool core_module = 2;
    }
    // The Python function name (e.g. `text`).
    optional string fn_name = 3;
}

message EditorField {
    optional string name = 1;
    optional FieldType type = 2;
}

message FieldType {
    oneof type {
        BoolType bool_type = 1;
        IntType int_type = 2;
        FloatType float_type = 3;
        StringType string_type = 4;
        LiteralType literal_type = 5;
        ListType list_type = 6;
        StructType struct_type = 7;
    }
}

message BoolType {
    optional bool default_value = 1;
}

message StructType {
    // Name of the Python class (usually a dataclass)
    optional string struct_name = 2;
    repeated EditorField fields = 1;
}

message IntType {
    optional int32 default_value = 1;
}

message FloatType {
    optional double default_value = 1;
}

message StringType {
    optional string default_value = 1;
}

message LiteralType {
    repeated LiteralElement literals = 1; // note: defaults to first element
}

message LiteralElement {
    oneof literal {
        string string_literal = 1;
        int32 int_literal = 2;
    }
}

message ListType {
    optional FieldType type = 1;
}
