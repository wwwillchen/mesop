syntax = "proto3";

package mesop_internal.generator.protos;


// Everything needed to generate a component spec
message ComponentSpecInput {
    string name = 1;
    repeated string target_classes = 4;
    bool has_content = 3;

    // Element to render, e.g. "mat-checkbox", "button"
    string element_name = 5;
    // By default, we will assume it's the kebab-cased version of |name|
    // however, sometimes it's in a different file (assuming it's in the same directory).
    string ts_filename = 8;

    // e.g. "mat-button", "mat-raised-button"
    repeated string directive_names = 7;

    // e.g. "click"
    repeated string native_events = 9;

    // e.g. some properties such as "disabledInteractive" (for mat-button) causes type issues.
    repeated string skip_property_names = 10;

    // TODO: may need to make this multiple modules
    repeated NgModuleSpec ng_modules = 6;

    // If this is a form component that needs to be wrapped by <mat-form-field> (https://material.angular.io/components/form-field/overview)
    // then set this to true. This will merge all the properties from form field.
    bool is_form_field = 11;
}

message NgModuleSpec {
    string import_path = 1;
    string module_name = 2;
    // Other symbols that need to be imported
    repeated string other_symbols = 3;
}

// Used to define a component which can generate the
// necessary bindings in TS, Proto and Python.
message ComponentSpec {
    ComponentSpecInput input = 1;

    repeated Prop input_props = 2;
    repeated OutputProp output_props = 3;
}

// If it's merged from form field, we need to keep track when generating the template.
enum Target {
    // If it belongs to the regular component
    TARGET_UNDEFINED = 0;
    // If it belongs to <mat-form-field>
    TARGET_FORM_FIELD = 1;
    // If it belongs to <mat-label>
    TARGET_LABEL = 2;
}

message Prop {
    // Name of the property (e.g. JS property name on Angular component)
    string name = 1;
    // https://angular.io/api/core/Input#alias
    string alias = 4;
    XType type = 2;
    string debug_type = 3;
    Target target = 5;
    string docs = 6;
}

message OutputProp {
    // Name of the property
    string name = 1;
    // e.g. MatCheckboxChange
    string event_name = 2;
    repeated Prop event_props = 3;
    // Original type in JS (can be a primitive, e.g. `boolean`, or custom type, e.g.`MatCheckboxChange`).
    JsType event_js_type = 4;
    string docs = 5;
}

message JsType {
    string type_name = 1;
    // e.g. true if boolean, string, etc.
    bool is_primitive = 2;
}

// Represents a platform-neutral type.
// Must representable in Python and JS.
message XType {
  oneof type {
    SimpleType simple_type = 1;
    StringLiterals string_literals = 2;
  }
}

enum SimpleType {
    SIMPLE_TYPE_UNDEFINED = 0;
    STRING = 1;
    BOOL = 2;
    NUMBER = 3;
}

message StringLiterals {
    repeated string string_literal = 1;
    string default_value = 2;
}
