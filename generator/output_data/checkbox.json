{
  "input": {
    "name": "checkbox",
    "targetClassesList": ["MatCheckbox"],
    "hasContent": true,
    "elementName": "mat-checkbox",
    "tsFilename": "",
    "directiveNamesList": [],
    "nativeEventsList": [],
    "skipPropertyNamesList": [],
    "ngModulesList": [
      {
        "importPath": "@angular/material/checkbox",
        "moduleName": "MatCheckboxModule",
        "otherSymbolsList": ["MatCheckboxChange"]
      }
    ],
    "isFormField": false
  },
  "inputPropsList": [
    {
      "name": "ariaLabel",
      "alias": "aria-label",
      "type": {
        "simpleType": 1
      },
      "debugType": "string",
      "target": 0,
      "docs": "Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will take precedence so this may be omitted."
    },
    {
      "name": "ariaLabelledby",
      "alias": "aria-labelledby",
      "type": {
        "simpleType": 1
      },
      "debugType": "string | null",
      "target": 0,
      "docs": "Users can specify the `aria-labelledby` attribute which will be forwarded to the input element"
    },
    {
      "name": "ariaDescribedby",
      "alias": "aria-describedby",
      "type": {
        "simpleType": 1
      },
      "debugType": "string",
      "target": 0,
      "docs": "The 'aria-describedby' attribute is read after the element's label and field type."
    },
    {
      "name": "id",
      "alias": "",
      "type": {
        "simpleType": 1
      },
      "debugType": "string",
      "target": 0,
      "docs": "A unique id for the checkbox input. If none is supplied, it will be auto-generated."
    },
    {
      "name": "required",
      "alias": "",
      "type": {
        "simpleType": 2
      },
      "debugType": "boolean",
      "target": 0,
      "docs": "Whether the checkbox is required."
    },
    {
      "name": "labelPosition",
      "alias": "",
      "type": {
        "simpleType": 0,
        "stringLiterals": {
          "stringLiteralList": ["before", "after"],
          "defaultValue": "after"
        }
      },
      "debugType": "'before' | 'after'",
      "target": 0,
      "docs": "Whether the label should appear after or before the checkbox. Defaults to 'after'"
    },
    {
      "name": "name",
      "alias": "",
      "type": {
        "simpleType": 1
      },
      "debugType": "string | null",
      "target": 0,
      "docs": "Name value will be applied to the input element if present"
    },
    {
      "name": "value",
      "alias": "",
      "type": {
        "simpleType": 1
      },
      "debugType": "string",
      "target": 0,
      "docs": "The value attribute of the native input element"
    },
    {
      "name": "disableRipple",
      "alias": "",
      "type": {
        "simpleType": 2
      },
      "debugType": "boolean",
      "target": 0,
      "docs": "Whether the checkbox has a ripple."
    },
    {
      "name": "tabIndex",
      "alias": "",
      "type": {
        "simpleType": 3
      },
      "debugType": "number",
      "target": 0,
      "docs": "Tabindex for the checkbox."
    },
    {
      "name": "color",
      "alias": "",
      "type": {
        "simpleType": 1
      },
      "debugType": "string | undefined",
      "target": 0,
      "docs": "Palette color of the checkbox."
    },
    {
      "name": "checked",
      "alias": "",
      "type": {
        "simpleType": 2
      },
      "debugType": "boolean",
      "target": 0,
      "docs": "Whether the checkbox is checked."
    },
    {
      "name": "disabled",
      "alias": "",
      "type": {
        "simpleType": 2
      },
      "debugType": "boolean",
      "target": 0,
      "docs": "Whether the checkbox is disabled."
    },
    {
      "name": "indeterminate",
      "alias": "",
      "type": {
        "simpleType": 2
      },
      "debugType": "boolean",
      "target": 0,
      "docs": "Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to represent a checkbox with three states, e.g. a checkbox that represents a nested list of checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately set to false."
    }
  ],
  "outputPropsList": [
    {
      "name": "change",
      "eventName": "CheckboxChangeEvent",
      "eventPropsList": [
        {
          "name": "checked",
          "alias": "",
          "type": {
            "simpleType": 2
          },
          "debugType": "",
          "target": 0,
          "docs": "The new `checked` value of the checkbox."
        }
      ],
      "eventJsType": {
        "typeName": "MatCheckboxChange",
        "isPrimitive": false
      },
      "docs": "Event emitted when the checkbox's `checked` value changes."
    },
    {
      "name": "indeterminateChange",
      "eventName": "CheckboxIndeterminateChangeEvent",
      "eventPropsList": [
        {
          "name": "indeterminate",
          "alias": "",
          "type": {
            "simpleType": 2
          },
          "debugType": "",
          "target": 0,
          "docs": ""
        }
      ],
      "eventJsType": {
        "typeName": "boolean",
        "isPrimitive": true
      },
      "docs": "Event emitted when the checkbox's `indeterminate` value changes."
    }
  ]
}
